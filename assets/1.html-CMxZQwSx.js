import{_ as i,c as a,a as e,o as s}from"./app-Dh5bFHR3.js";const n="/blog/assets/image-20220315214611850-Dli44pr4.png",t="/blog/assets/image-20220315214708159-B06mqqwB.png",r="/blog/assets/image-20220315214757616-Dz0zSwBK.png",o="/blog/assets/image-20220315214824622-Bpx2OCCn.png",h={};function p(c,l){return s(),a("div",null,l[0]||(l[0]=[e('<h1 id="导论" tabindex="-1"><a class="header-anchor" href="#导论"><span>导论</span></a></h1><h2 id="_1-1-操作系统的功能" tabindex="-1"><a class="header-anchor" href="#_1-1-操作系统的功能"><span>1.1 操作系统的功能</span></a></h2><ul><li>计算机系统可以粗分为四个组件： <ul><li>硬件</li><li>操作系统</li><li>应用程序</li><li>用户</li></ul></li><li>计算机系统可以分为 <ul><li>硬件</li><li>软件</li><li>数据</li></ul></li><li>操作系统的作用 <ul><li>用户与硬件之间的接口</li><li>资源的管理者</li></ul></li></ul><h2 id="_1-2-操作系统的发展" tabindex="-1"><a class="header-anchor" href="#_1-2-操作系统的发展"><span>1.2 操作系统的发展</span></a></h2><h3 id="单道批处理系统" tabindex="-1"><a class="header-anchor" href="#单道批处理系统"><span>单道批处理系统</span></a></h3><ul><li>主要电子器件是<strong>晶体管</strong>，开始使用<strong>磁性存储设备</strong>，<strong>内外存容量增加</strong>，计算机运算速度提高，出现了早期的单道批处理系统。</li></ul><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h4><p>单道批处理系统内存中只有一道作业，可以自动处理作业</p><ul><li>自动性 <ul><li>单道批处理系统使计算机能够在操作系统控制下，<strong>自动</strong>地将作业从外存<strong>装入内存</strong>运行。当作业运行完毕后，<strong>自动撤销</strong>已运行完毕的作业，并依次从外存装入下一个作业，使之运行。</li></ul></li><li>顺序性 <ul><li>存放在外存中的作业<strong>按顺序</strong>依次被装入内存运行，先进入内存的作业先运行完毕。</li></ul></li><li>单道性 <ul><li>任何时刻<strong>内存中只有一道作业</strong>。</li></ul></li></ul><h3 id="多道程序系统" tabindex="-1"><a class="header-anchor" href="#多道程序系统"><span>多道程序系统</span></a></h3><ul><li>早期的多道程序系统<strong>不具有交互功能</strong>，被称为多道批处理系统。程序员提交作业后，在作业运行结束，输出结果之前，无法观察和控制作业的运行。</li><li>解决这一问题的需求非常迫切，于是出现了<strong>分时操作系统</strong>。 <ul><li>在分时操作系统的支持下，<strong>多个用户</strong>可以<strong>同时通过不同的终端使用主机</strong>，主机可以快速响应常用命令。终端用户感觉自己独占计算机资源，并且实现<strong>用户与主机的及时交互</strong>。</li></ul></li><li>在分时系统中同时登录系统的多个用户提交的作业<strong>轮流执行</strong>，每个作业都是运行一小段时间就把主机资源让给另一个作业运行一段时间，<strong>多个作业交替执行，分时使用主机资源。</strong></li></ul><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h4><p>​ 在多道批处理系统中，用户所提交的作业都先存放在外存中并排成一个队列，该队列被称为“后备作业队列”。由操作系统的作业调度程序按一定策略从后备作业队列中选择若干个作业调入内存，使它们共享CPU和系统中的各种资源，以达到提高资源利用率和系统吞吐量的目的。</p><ul><li>多道性</li><li>无序性：先进入内存的作业不一定先被调度。</li><li>调度性：作业调度和进程调度</li><li>复杂性</li></ul><h3 id="分时操作系统" tabindex="-1"><a class="header-anchor" href="#分时操作系统"><span>分时操作系统</span></a></h3><h4 id="特点-2" tabindex="-1"><a class="header-anchor" href="#特点-2"><span>特点</span></a></h4><ul><li>分时操作系统<strong>允许多个用户通过终端同时使用计算机</strong>。是多道批处理系统的自然延伸，支持多个用户任务同时驻留内存，每个用户通过终端与主机交互时都能得到快速响应。</li><li>分时系统的特点是 <ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li></ul></li><li>分时系统的优点是向用户提供了人机交互的方便性，使多个用户可以通过不同的终端共享主机。</li></ul><h3 id="实时操作系统" tabindex="-1"><a class="header-anchor" href="#实时操作系统"><span>实时操作系统</span></a></h3><ul><li>随着计算机的广泛应用，出现了各种实时操作系统。实时操作系统是支持实时计算的系统。</li><li>实时系统不仅要求系统能正确地计算出结果，而且要求必须在规定的时间内计算出正确结果。</li><li>如果计算结果正确，但时间超过了规定时间，依然被认为计算出错。</li></ul><h4 id="特点-3" tabindex="-1"><a class="header-anchor" href="#特点-3"><span>特点</span></a></h4><p>实时系统主要用于实时控制和实时信息处理领域。必须能<strong>及时响应</strong>外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。</p><ul><li>多路性</li><li>独立性 <ul><li>每个终端用户独立向实时系统提出服务请求，彼此互不干扰。</li></ul></li><li>及时性 <ul><li>实时信息系统对实时性的要求是以人所能接受的等待时间来确定的。</li></ul></li><li>交互性</li><li>可靠性</li></ul><h2 id="操作系统的特性" tabindex="-1"><a class="header-anchor" href="#操作系统的特性"><span>操作系统的特性</span></a></h2><h3 id="并发性" tabindex="-1"><a class="header-anchor" href="#并发性"><span>并发性</span></a></h3><ul><li><p>优点</p><ul><li>程序并发性能够驱动不同部件同时工作</li><li>减少或消除部件和部件之间的相互等待</li><li>改善系统资源利用率，改进系统吞吐量，提高系统效率</li></ul></li><li><p><strong>并发</strong>：指两个或两个以上的事件或活动在<strong>同一时间间隔</strong>内发生</p><ul><li>计算机系统中同时存在若干个运行的程序，这些程序交替/穿插着执行。</li><li>在多道程序环境下，并发性是指在一段时间内宏观上有多个程序在同时运行</li><li>但在单处理机系统中，每一时刻却仅能有一道程序执行，故微观上这些程序只能是分时地交替执行</li></ul></li><li><p><strong>并行</strong>：两个或两个以上的事件或活动在<strong>同一时刻</strong>发生。</p></li></ul><h3 id="共享性" tabindex="-1"><a class="header-anchor" href="#共享性"><span>共享性</span></a></h3><ul><li><p>操作系统中的资源（包括硬件资源和信息资源）可被多个并发执行的进程共同使用，而不是被其中某一个程序所独占</p></li><li><p>两种方式</p><ul><li><p>互斥访问</p><ul><li>顺序访问，系统中的某些资源同一时间内只允许一个进程访问</li></ul><p><img src="'+n+'" alt="image-20220315214611850"></p></li><li><p>同时访问</p><ul><li>并发访问，允许同一时间内多个进程对某系资源进行交替穿插的访问。</li></ul><p><img src="'+t+'" alt="image-20220315214708159"></p></li></ul></li></ul><h3 id="异步性" tabindex="-1"><a class="header-anchor" href="#异步性"><span>异步性</span></a></h3><ul><li>也称随机性，在多道程序环境中，程序的执行不是一贯到底，而是走走停停的，何时走何时停，是不可预知的。</li></ul><p><img src="'+r+'" alt="image-20220315214757616"></p><h3 id="虚拟性" tabindex="-1"><a class="header-anchor" href="#虚拟性"><span>虚拟性</span></a></h3><ul><li>操作系统资源管理技术的特性，虚拟资源管理技术即资源虚化，将物理上的一个实体变成逻辑上的多个对应物，或把物理上的多个实体变成逻辑上的一个对应物。</li></ul><p><img src="'+o+'" alt="image-20220315214824622"></p>',33)]))}const d=i(h,[["render",p]]),g=JSON.parse('{"path":"/blogs/xxbj/OS/1.html","title":"操作系统导论","lang":"en-US","frontmatter":{"title":"操作系统导论","date":"2022-03-18T00:00:00.000Z","tags":["操作系统"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"1.1 操作系统的功能","slug":"_1-1-操作系统的功能","link":"#_1-1-操作系统的功能","children":[]},{"level":2,"title":"1.2 操作系统的发展","slug":"_1-2-操作系统的发展","link":"#_1-2-操作系统的发展","children":[{"level":3,"title":"单道批处理系统","slug":"单道批处理系统","link":"#单道批处理系统","children":[]},{"level":3,"title":"多道程序系统","slug":"多道程序系统","link":"#多道程序系统","children":[]},{"level":3,"title":"分时操作系统","slug":"分时操作系统","link":"#分时操作系统","children":[]},{"level":3,"title":"实时操作系统","slug":"实时操作系统","link":"#实时操作系统","children":[]}]},{"level":2,"title":"操作系统的特性","slug":"操作系统的特性","link":"#操作系统的特性","children":[{"level":3,"title":"并发性","slug":"并发性","link":"#并发性","children":[]},{"level":3,"title":"共享性","slug":"共享性","link":"#共享性","children":[]},{"level":3,"title":"异步性","slug":"异步性","link":"#异步性","children":[]},{"level":3,"title":"虚拟性","slug":"虚拟性","link":"#虚拟性","children":[]}]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/OS/1.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(g));export{d as comp,g as data};
