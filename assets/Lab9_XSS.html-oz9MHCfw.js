import{_ as n,c as a,a as t,o as p}from"./app-Dh5bFHR3.js";const e="/blog/assets/image-20220826170958442-J2235Sjg.png",l="/blog/assets/image-20220826171044751-Dn3G1nQN.png",o="/blog/assets/image-20220826171049202-D_WEQp_I.png",i="/blog/assets/image-20220826172346522-DKaxb7kI.png",c="/blog/assets/image-20220601085847049-BX50isOv.png",u="/blog/assets/image-20220601090612312-BryvIZ0-.png",r="/blog/assets/image-20220601090632148-tHBhNV2o.png",k="/blog/assets/image-20220601091229969-BdwtH3fa.png",d="/blog/assets/image-20220601091954957-DiMlEZsc.png",m="/blog/assets/image-20220601092011549-DZIWJ5Mp.png",g="/blog/assets/image-20220601092458734-CnsQBBM1.png",v="/blog/assets/image-20220601092613621-CUH-rWPs.png",b="/blog/assets/image-20220601092654046--wbrnL7t.png",h="/blog/assets/image-20220601093158763-DVLN_H3c.png",_="/blog/assets/image-20220601093228375-Bk5iKXrm.png",q={};function f(y,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="dvwa-xss" tabindex="-1"><a class="header-anchor" href="#dvwa-xss"><span>DVWA: XSS</span></a></h1><h2 id="dom-based-cross-site-scripting-xss" tabindex="-1"><a class="header-anchor" href="#dom-based-cross-site-scripting-xss"><span>DOM Based Cross Site Scripting (XSS)</span></a></h2><h3 id="low" tabindex="-1"><a class="header-anchor" href="#low"><span>Low</span></a></h3><h4 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># No protections, anything goes</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析"><span><s>代码分析</s></span></a></h4><p><s>这就没必要了吧</s></p><h4 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h4><p>看一眼默认效果</p><p><img src="`+e+'" alt="image-20220826170958442"></p><p>改一下URL，访问，搞定</p><p><img src="'+l+'" alt="image-20220826171044751"></p><p><img src="'+o+`" alt="image-20220826171049202"></p><h3 id="medium" tabindex="-1"><a class="header-anchor" href="#medium"><span>Medium</span></a></h3><h4 id="源代码-1" tabindex="-1"><a class="header-anchor" href="#源代码-1"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_null</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Do not allow script tags</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span> <span class="token punctuation">(</span><span class="token variable">$default</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;&lt;script&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;location: ?default=English&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">exit</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-1" tabindex="-1"><a class="header-anchor" href="#代码分析-1"><span>代码分析</span></a></h4><p><code>stripos()</code> 函数：查找字符串在另一字符串中第一次出现的位置（不区分大小写）。(strpos区分大小写)</p><p><code>header()</code> 函数：向客户端发送原始的 HTTP 报头。</p><p>服务端当default参数存在且不为空的时候处理, 并且过滤了<code>&lt;script&gt;</code>标签，如果出现则自动跳到 English，同时利用 strpos 过滤大小写</p><h4 id="漏洞利用-1" tabindex="-1"><a class="header-anchor" href="#漏洞利用-1"><span>漏洞利用</span></a></h4><h4 id="法一-用html标签执行js" tabindex="-1"><a class="header-anchor" href="#法一-用html标签执行js"><span>法一：用HTML标签执行JS</span></a></h4><p>如利用 img 标签：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">default=English&quot;&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=&quot;&quot; οnerrοr=&quot;alert(&#39;XSS&#39;)&quot;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="法二-用url截断-加-号" tabindex="-1"><a class="header-anchor" href="#法二-用url截断-加-号"><span>法二：用Url截断，加 # 号</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">#default=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="high" tabindex="-1"><a class="header-anchor" href="#high"><span>High</span></a></h3><h4 id="源代码-2" tabindex="-1"><a class="header-anchor" href="#源代码-2"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_null</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># White list the allowable languages</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;French&quot;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;English&quot;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;German&quot;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string double-quoted-string">&quot;Spanish&quot;</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># ok</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;location: ?default=English&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">exit</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-2" tabindex="-1"><a class="header-anchor" href="#代码分析-2"><span>代码分析</span></a></h4><p>用了白名单的过滤方法, default变量中的值，必须是French，English，German，Spanish才行否则就进行跳转结束运行</p><h4 id="漏洞利用-2" tabindex="-1"><a class="header-anchor" href="#漏洞利用-2"><span>漏洞利用</span></a></h4><p>用Url截断，加 # 号</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">#default=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="impossible" tabindex="-1"><a class="header-anchor" href="#impossible"><span>Impossible</span></a></h3><h4 id="源代码-3" tabindex="-1"><a class="header-anchor" href="#源代码-3"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Don&#39;t need to do anything, protection handled on the client side</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-3" tabindex="-1"><a class="header-anchor" href="#代码分析-3"><span>代码分析</span></a></h4><p>在前端做过滤，输入的任何参数都是经过URL编码，然后直接赋值给option标签，而后端不进行任何过滤。</p><p><img src="`+i+`" alt="image-20220826172346522"></p><h2 id="reflected-cross-site-scripting-xss" tabindex="-1"><a class="header-anchor" href="#reflected-cross-site-scripting-xss"><span>Reflected Cross Site Scripting (XSS)</span></a></h2><h3 id="low-1" tabindex="-1"><a class="header-anchor" href="#low-1"><span>Low</span></a></h3><h4 id="源代码-4" tabindex="-1"><a class="header-anchor" href="#源代码-4"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;X-XSS-Protection: 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Feedback for end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;&lt;pre&gt;Hello &#39;</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&lt;/pre&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h4><p>代码直接采用get方式传入了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞。</p><h4 id="漏洞利用-3" tabindex="-1"><a class="header-anchor" href="#漏洞利用-3"><span>漏洞利用</span></a></h4><p>尝试最普通的payload测试：输入“&lt;script&gt;alert(/21215250327/)&lt;/script&gt;”，并点击Submit，成功弹出Alert</p><p><img src="`+c+`" alt="image-20220601085847049"></p><h3 id="medium-1" tabindex="-1"><a class="header-anchor" href="#medium-1"><span>Medium</span></a></h3><h4 id="源代码-5" tabindex="-1"><a class="header-anchor" href="#源代码-5"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;X-XSS-Protection: 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;&lt;script&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;Hello \${name}&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-4" tabindex="-1"><a class="header-anchor" href="#代码分析-4"><span>代码分析</span></a></h4><p>易见，在Medium等级中，对输入进行了过滤，使用str_replace函数将输入中的<code>&lt;script&gt;</code>替换为空，但是这种黑名单防护机制是可以很容易绕过的，比如使用大小写混合、双写模式等。</p><h4 id="漏洞例用" tabindex="-1"><a class="header-anchor" href="#漏洞例用"><span>漏洞例用</span></a></h4><p>使用大小写混合模式尝试注入 <code>&lt;ScRipt&gt;alert(/21215250327/);&lt;/ScRipt&gt;</code> ，成功弹出 Alert</p><p><img src="`+u+'" alt="image-20220601090612312"></p><p><img src="'+r+`" alt="image-20220601090632148"></p><h3 id="high-1" tabindex="-1"><a class="header-anchor" href="#high-1"><span>High</span></a></h3><h4 id="源代码-6" tabindex="-1"><a class="header-anchor" href="#源代码-6"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;X-XSS-Protection: 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;Hello \${name}&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-5" tabindex="-1"><a class="header-anchor" href="#代码分析-5"><span>代码分析</span></a></h4><p>High等级的代码同样使用黑名单过滤输入，preg_replace() 函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过不再有效。但是，仍然可以通过img、body等标签的事件或者iframe、src等标签的构造可利用的js代码。</p><h4 id="漏洞利用-4" tabindex="-1"><a class="header-anchor" href="#漏洞利用-4"><span>漏洞利用</span></a></h4><p>使用 img 标签和其编码转换后的 XSS payload：&lt;img src=1 onerror=alert(/21215250327/)&gt; ， 成功弹出Alert</p><p><img src="`+k+`" alt="image-20220601091229969"></p><h3 id="impossible-1" tabindex="-1"><a class="header-anchor" href="#impossible-1"><span>Impossible</span></a></h3><h4 id="源代码-7" tabindex="-1"><a class="header-anchor" href="#源代码-7"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Is there any input?</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Check Anti-CSRF token</span></span>
<span class="line">    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;user_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;session_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index.php&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;Hello \${name}&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Generate Anti-CSRF token</span></span>
<span class="line"><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-6" tabindex="-1"><a class="header-anchor" href="#代码分析-6"><span>代码分析</span></a></h4><p>这里使用了一个htmlspecialchars函数，htmlspecialchars()这个函数的的功能：是把预定义的字符&amp;、&quot;、&#39;、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素。还加入了Anti-CSRF token，防止结合CSRF（跨站请求伪造）攻击</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&amp; （和号）成为 &amp;amp;</span>
<span class="line">&quot; （双引号）成为 &amp;quot; </span>
<span class="line">&#39; （单引号）成为 &amp;apos;//生效需要加 ENT_QUOTES 参数</span>
<span class="line">&lt; （小于）成为 &amp;lt;</span>
<span class="line">&gt; （大于）成为 &amp;gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="stored-cross-site-scripting-xss" tabindex="-1"><a class="header-anchor" href="#stored-cross-site-scripting-xss"><span>Stored Cross Site Scripting (XSS)</span></a></h1><h3 id="low-2" tabindex="-1"><a class="header-anchor" href="#low-2"><span>Low</span></a></h3><h4 id="源代码-8" tabindex="-1"><a class="header-anchor" href="#源代码-8"><span>源代码</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token operator">&lt;</span><span class="token operator">?</span>php</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> $_POST<span class="token punctuation">[</span> &#39;btnSign&#39; <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    $message <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> $_POST<span class="token punctuation">[</span> &#39;mtxMessage&#39; <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    $name    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> $_POST<span class="token punctuation">[</span> &#39;txtName&#39; <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize message input</span></span>
<span class="line">    $message <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> $message <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    $message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>  $message <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span></span><span class="token punctuation">,</span> E_USER_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span> <span class="token operator">:</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize name input</span></span>
<span class="line">    $name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>  $name <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span></span><span class="token punctuation">,</span> E_USER_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span> <span class="token operator">:</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update database</span></span>
<span class="line">    $query  <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">message</span></span><span class="token string">&#39;, &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&#39; );&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line">    $result <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>  $query <span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">die</span><span class="token punctuation">(</span> &#39;<span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span>&#39; <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span>$GLOBALS<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;___mysqli_ston&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>$___mysqli_res <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> $___mysqli_res <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> &#39;<span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span>&#39; <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//mysql_close();</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">?</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-7" tabindex="-1"><a class="header-anchor" href="#代码分析-7"><span>代码分析</span></a></h4><p>相关函数：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">trim(string,charlist)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括\\0、\\t、\\n、\\x0B、\\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mysqli_real_escape_string(string,connection)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>函数会对字符串中的特殊符号（\\x00，\\n，\\r，\\，&#39;，&quot;，\\x1a）进行转义。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stripslashes(string)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>函数删除字符串中的反斜杠。</p><p>可以看到，对输入并没有做XSS方面的过滤与检查，且存储在数据库中，因此这里存在明显的存储型XSS漏洞。</p><h4 id="漏洞利用-5" tabindex="-1"><a class="header-anchor" href="#漏洞利用-5"><span>漏洞利用</span></a></h4><p>尝试payload，成功弹出Alert</p><p><img src="`+d+'" alt="image-20220601091954957"></p><p><img src="'+m+`" alt="image-20220601092011549"></p><h3 id="medium-2" tabindex="-1"><a class="header-anchor" href="#medium-2"><span>Medium</span></a></h3><h4 id="源代码-9" tabindex="-1"><a class="header-anchor" href="#源代码-9"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;btnSign&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;mtxMessage&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span>    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;txtName&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize message input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span> <span class="token function">addslashes</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize name input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;&lt;script&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update database</span></span>
<span class="line">    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;<span class="token interpolation"><span class="token variable">$message</span></span>&#39;, &#39;<span class="token interpolation"><span class="token variable">$name</span></span>&#39; );&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;&lt;pre&gt;&#39;</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&lt;/pre&gt;&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//mysql_close();</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-8" tabindex="-1"><a class="header-anchor" href="#代码分析-8"><span>代码分析</span></a></h4><p><code>strip_tags()</code>函数剥去字符串中的HTML、XML以及PHP的标签，但允许使用<code>&lt;b&gt;</code>标签。</p><p><code>addslashes()</code>函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。</p><p>可以看到，由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS。</p><h4 id="漏洞利用-6" tabindex="-1"><a class="header-anchor" href="#漏洞利用-6"><span>漏洞利用</span></a></h4><p>Name限制字符数量，尝试在Message中注入：<code>\\&lt;ScRipt\\&gt;alert(/21215250327/);\\&lt;/ScRipt\\&gt;</code>，出现意料之中的失败；</p><p>将Name文本框的Maxsize改大</p><p><img src="`+g+'" alt="image-20220601092458734"></p><p>输入并Sign Guestbook</p><p><img src="'+v+'" alt="image-20220601092613621"></p><p>成功弹出 Alert</p><p><img src="'+b+`" alt="image-20220601092654046"></p><h3 id="high-2" tabindex="-1"><a class="header-anchor" href="#high-2"><span>High</span></a></h3><h4 id="源代码-10" tabindex="-1"><a class="header-anchor" href="#源代码-10"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;btnSign&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;mtxMessage&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span>    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;txtName&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize message input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span> <span class="token function">addslashes</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize name input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update database</span></span>
<span class="line">    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;<span class="token interpolation"><span class="token variable">$message</span></span>&#39;, &#39;<span class="token interpolation"><span class="token variable">$name</span></span>&#39; );&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;&lt;pre&gt;&#39;</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&lt;/pre&gt;&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//mysql_close();</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-9" tabindex="-1"><a class="header-anchor" href="#代码分析-9"><span>代码分析</span></a></h4><p>可以看到，这里使用正则表达式过滤了&lt;script&gt;标签，但是却忽略了img、iframe等其它危险的标签，因此name参数依旧存在存储型XSS。</p><h4 id="漏洞例用-1" tabindex="-1"><a class="header-anchor" href="#漏洞例用-1"><span>漏洞例用</span></a></h4><p>改Name字段的Maxsize，输入&lt;img src=1 onerror=alert(/21215250327/)&gt;</p><p><img src="`+h+'" alt="image-20220601093158763"></p><p>成功弹出Alert</p><p><img src="'+_+`" alt="image-20220601093228375"></p><h3 id="impossible-2" tabindex="-1"><a class="header-anchor" href="#impossible-2"><span>Impossible</span></a></h3><h4 id="源代码-11" tabindex="-1"><a class="header-anchor" href="#源代码-11"><span>源代码</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;btnSign&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Check Anti-CSRF token</span></span>
<span class="line">    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;user_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;session_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index.php&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;mtxMessage&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span>    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;txtName&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize message input</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Sanitize name input</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;___mysqli_ston&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update database</span></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;:message&#39;</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;:name&#39;</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Generate Anti-CSRF token</span></span>
<span class="line"><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码分析-10" tabindex="-1"><a class="header-anchor" href="#代码分析-10"><span>代码分析</span></a></h4><p>可以看到，通过使用htmlspecialchars函数将几种特殊字符转义为HTML实体，mysqli_real_escape_string函数对单引号&#39;转义，防止进行SQL注入,彻底防治了存储型 XSS 的利用和危害。</p>`,119)]))}const x=n(q,[["render",f]]),S=JSON.parse('{"path":"/blogs/xxbj/Web_Security/Lab9_XSS.html","title":"DVWA - Weak Session IDs","lang":"en-US","frontmatter":{"title":"DVWA - Weak Session IDs","date":"2022-06-30T00:00:00.000Z","tags":["网络安全"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"DOM Based Cross Site Scripting (XSS)","slug":"dom-based-cross-site-scripting-xss","link":"#dom-based-cross-site-scripting-xss","children":[{"level":3,"title":"Low","slug":"low","link":"#low","children":[]},{"level":3,"title":"Medium","slug":"medium","link":"#medium","children":[]},{"level":3,"title":"High","slug":"high","link":"#high","children":[]},{"level":3,"title":"Impossible","slug":"impossible","link":"#impossible","children":[]}]},{"level":2,"title":"Reflected Cross Site Scripting (XSS)","slug":"reflected-cross-site-scripting-xss","link":"#reflected-cross-site-scripting-xss","children":[{"level":3,"title":"Low","slug":"low-1","link":"#low-1","children":[]},{"level":3,"title":"Medium","slug":"medium-1","link":"#medium-1","children":[]},{"level":3,"title":"High","slug":"high-1","link":"#high-1","children":[]},{"level":3,"title":"Impossible","slug":"impossible-1","link":"#impossible-1","children":[]},{"level":3,"title":"Low","slug":"low-2","link":"#low-2","children":[]},{"level":3,"title":"Medium","slug":"medium-2","link":"#medium-2","children":[]},{"level":3,"title":"High","slug":"high-2","link":"#high-2","children":[]},{"level":3,"title":"Impossible","slug":"impossible-2","link":"#impossible-2","children":[]}]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/Web_Security/Lab9_XSS.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(S));export{x as comp,S as data};
