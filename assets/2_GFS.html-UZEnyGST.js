import{_ as e,c as i,a,o as t}from"./app-Dh5bFHR3.js";const s="/blog/assets/image-20220307132620615-eoDnOMVA.png",r="/blog/assets/image-20220307132739614-q0Yx8UCe.png",n="/blog/assets/image-20220307142503379-gW3tYwzf.png",p="/blog/assets/image-20220308104437683-sWyWO5Cs.png",o="/blog/assets/image-20220308104641178-6PlDaSAE.png",h="/blog/assets/image-20220308104746485-DT7yOmG0.png",g="/blog/assets/image-20220308105129674-BVRnaptT.png",u="/blog/assets/image-20220308105215447-B1zUq4u4.png",c="/blog/assets/image-20220308105250863-C8uKDWm8.png",d="/blog/assets/image-20220308110714957-AxyB_pLF.png",b="/blog/assets/image-20220309103613765-B2KIh9ZF.png",_="/blog/assets/image-20220309103637537-Bd2azy4U.png",m="/blog/assets/image-20220309104753368-Db3mWcBn.png",C="/blog/assets/image-20220309135138431-DtY0X3j4.png",k="/blog/assets/image-20220309135506332-t_j34LEe.png",y="/blog/assets/image-20220309141334693-COTwsUXw.png",v="/blog/assets/image-20220309141736041-BCdfMCE7.png",f="/blog/assets/image-20220309141804780-mPvhiDHB.png",x="/blog/assets/image-20220309141949461-Comfhu5p.png",M="/blog/assets/image-20220309142425495-r_N7aLw-.png",S="/blog/assets/image-20220309142444490-C27wKu4C.png",B="/blog/assets/image-20220309142601236-Dt7QURyI.png",G={};function R(F,l){return t(),i("div",null,l[0]||(l[0]=[a('<h2 id="_2-1-google文件系统gfs" tabindex="-1"><a class="header-anchor" href="#_2-1-google文件系统gfs"><span>2.1 Google文件系统GFS</span></a></h2><h3 id="_2-1-1-系统框架" tabindex="-1"><a class="header-anchor" href="#_2-1-1-系统框架"><span>2.1.1 系统框架</span></a></h3><p><img src="'+s+'" alt="image-20220307132620615"></p><h4 id="系统节点的角色" tabindex="-1"><a class="header-anchor" href="#系统节点的角色"><span>系统节点的角色</span></a></h4><p><img src="'+r+'" alt="image-20220307132739614"></p><h4 id="实现机制" tabindex="-1"><a class="header-anchor" href="#实现机制"><span>实现机制</span></a></h4><ul><li><p>客户端首先访问Master节点，获取交互的Chunk Server信息，然后访问这些Chunk Server，完成数据存取工作。</p><ul><li>这种设计方法实现了<strong>控制流和数据流的分离</strong>。</li><li>Client与Master之间只有控制流，而无数据流，极大地<strong>降低了Master的负载</strong>。</li><li>Client与Chunk Server之间直接传输数据流，同时由于文件被分成多个Chunk进行分布式存储，<strong>Client可以同时访问多个Chunk Server</strong>，从而使得整个系统的I/O高度并行，系统整体性能得到提高。</li></ul></li><li><p><strong>采用中心服务器模式</strong></p><ul><li>Master管理分布式文件系统中的所有元数据</li><li>Chunk Server只是一个存储空间</li><li>Chunk Server之间无任何关系</li><li>避免Master成为系统性能和可靠性上的瓶颈 <ul><li>控制元数据的规模</li><li>对Master进行远程备份、控制信息和数据分流</li></ul></li><li>优点： <ul><li>可以方便地增加Chunk Server</li><li>Master掌握系统内所有Chunk Server的情况，方便进行负载均衡</li><li>不存在元数据的一致性问题</li></ul></li></ul></li><li><p><strong>不缓存数据</strong></p><ul><li>文件操作大部分是流式读写，不存在大量重复读写，使用Cache对性能提高不</li><li>Chunk Server上数据存取使用本地文件系统从可行性看，Cache与实际数据的一致性维护也极其复杂</li></ul></li><li><p><strong>在用户态下实现</strong></p><ul><li>利用POSIX编程接口存取数据降低了实现难度，提高通用性</li><li>POSIX接口提供功能更丰富</li><li>用户态下有多种调试工具</li><li>Master和Chunk Server都以进程方式运行，单个进程不影响整个操作系统</li><li>GFS和操作系统运行在不同的空间，两者耦合性降低</li></ul></li></ul><h3 id="_2-1-2-容错机制" tabindex="-1"><a class="header-anchor" href="#_2-1-2-容错机制"><span>2.1.2 容错机制</span></a></h3><ul><li>Master上保存了GFS文件系统的三种元数据。 <ul><li>当Master发生故障时，在磁盘数据保存完好的情况下，可以迅速恢复以上元数据</li><li>为了防止Master彻底死机的情况，GFS还提供了Master远程的实时备份</li></ul></li></ul><p><img src="'+n+'" alt="image-20220307142503379"></p><h4 id="chunk-server容错" tabindex="-1"><a class="header-anchor" href="#chunk-server容错"><span>Chunk Server容错</span></a></h4><ul><li>GFS采用副本的方式实现Chunk Server的容错</li><li>每一个Chunk有多个存储副本（默认为三个）</li><li>对于每一个Chunk，必须将所有的副本全部写入成功，才视为成功写入</li><li>相关的副本出现丢失或不可恢复等情况，Master自动将该副本复制到其他Chunk Server</li><li>GFS中的每一个文件被划分成多个Chunk，<strong>Chunk的默认大小是64MB</strong></li><li>每一个<strong>Chunk以Block为单位进行划分，大小为64KB</strong>，每一个Block对应一个32bit的校验和</li></ul><h3 id="_2-1-3-系统管理技术" tabindex="-1"><a class="header-anchor" href="#_2-1-3-系统管理技术"><span>2.1.3 系统管理技术</span></a></h3><ul><li>大规模集群安装技术 <ul><li>GFS集群中通常有非常多的节点，因此迅速地安装、部署一个GFS的系 统，以及迅速地进行节点的系统升级等，需要相应的技术支撑</li></ul></li><li>故障检测技术 <ul><li>GFS是构建在不可靠的廉价计算机之上的文件系统，节点数目多，在最短的时间内发现并确定发生故障的Chunk Server，需要相关的集群监控技术。</li></ul></li><li>节点动态加入技术 <ul><li>只需将裸机加入，就会自动获取系统并安装运行</li></ul></li><li>节能技术 <ul><li>对服务器主板进行修改，采用蓄电池代替昂贵的UPS（不间断 电源系统），提高能量的利用率。</li></ul></li></ul><h2 id="_2-2-分布式数据处理mapreduce" tabindex="-1"><a class="header-anchor" href="#_2-2-分布式数据处理mapreduce"><span>2.2 分布式数据处理MapReduce</span></a></h2><h3 id="_2-2-1-产生背景" tabindex="-1"><a class="header-anchor" href="#_2-2-1-产生背景"><span>2.2.1 产生背景</span></a></h3><ul><li>MapReduce这种<strong>并行编程模式</strong>思想最早是在<strong>1995</strong>年提出的。</li><li>与传统的分布式程序设计相比，MapReduce封装了<strong>并行处理、容错处理、本地化计算、负载均衡</strong>等细节，还<strong>提供了一个简单而强大的接口</strong>。</li><li>MapReduce把对数据集的大规模操作，<strong>分发给一个主节点管理下的各分节点</strong>共同完成，通过这种方式<strong>实现任务的可靠执行与容错机制</strong>。</li></ul><h3 id="_2-2-2-编程模型" tabindex="-1"><a class="header-anchor" href="#_2-2-2-编程模型"><span>2.2.2 编程模型</span></a></h3><p><img src="'+p+'" alt="image-20220308104437683"></p><ul><li>Map函数：对一部分原始数据进行指定的操作。 <ul><li>每个Map操作都针对不同的原始数据，因此Map与Map之间是互相独立的，这使得它们可以充分并行化。</li></ul></li><li>Reduce操作：对每个Map所产生的一部分中间结果进行合并操作。 <ul><li>每个Reduce所处理的Map中间结果是互不交叉的，所有Reduce产生的最终结果经过简单连接就形成了完整的结果集.</li></ul></li></ul><h4 id="编程模型" tabindex="-1"><a class="header-anchor" href="#编程模型"><span>编程模型</span></a></h4><p><img src="'+o+'" alt="image-20220308104641178"></p><p><strong>Map输入参数</strong>：in_key和in_value，它指明了Map需要处理的原始数据</p><p><strong>Map输出结果</strong>：一组&lt;key,value&gt;对，这是经过Map操作后所产生的中间结果</p><p><strong>Reduce输入参数</strong>：（key,[value1,…,valuem]）</p><p><strong>Reduce工作</strong>：对这些对应相同key的value值进行归并处理</p><p><strong>Reduce输出结果</strong>：（key, final_value），所有Reduce的结果并在一起就是最终结果</p><h3 id="_2-2-3-实现机制" tabindex="-1"><a class="header-anchor" href="#_2-2-3-实现机制"><span>2.2.3 实现机制</span></a></h3><p><img src="'+h+'" alt="image-20220308104746485"></p><ul><li>MapReduce函数首先把<strong>输入文件分成M块</strong></li><li>分派的执行程序中有一个<strong>主控程序Master</strong></li><li>一个被分配了Map任务的Worker读取并处理相关的输入块</li><li>这些缓冲到内存的中间结果将被定时写到本地硬盘，<strong>这些数据通过分区函数分成R个区</strong></li><li>当Master通知执行Reduce的Worker关于中间&lt;key,value&gt;对的位置时，它调用远程过程，从Map Worker的本地硬盘上读取缓冲的中间数据</li><li>Reduce Worker根据每一个唯一中间key来遍历所有的排序后的中间数据，并且把key和相关的中间结果值集合传递给用户定义的Reduce函数</li><li>当所有的Map任务和Reduce任务都完成的时候，Master激活用户程序</li></ul><h4 id="容错机制" tabindex="-1"><a class="header-anchor" href="#容错机制"><span>容错机制</span></a></h4><ul><li>Master失效 <ul><li>Master会周期性地设置检查点（checkpoint），并导出Master的数据。一旦某个任务失效，系统就从最近的一个检查点恢复并重新执行。</li><li>由于只有一个Master在运行，如果Master失效了，则只能终止整个MapReduce程序的运行并重新开始。</li></ul></li><li>Worker失效 <ul><li>Master会周期性地给Worker发送ping命令，如果没有Worker的应答，则Master认为Worker失效，终止对这个Worker的任务调度，把失效Worker的任务调度到其他Worker上重新执行。</li></ul></li></ul><h3 id="_2-2-4-案例分析" tabindex="-1"><a class="header-anchor" href="#_2-2-4-案例分析"><span>2.2.4 案例分析</span></a></h3><h4 id="怎样通过mapreduce完成排序工作-使其有序-字典序-呢" tabindex="-1"><a class="header-anchor" href="#怎样通过mapreduce完成排序工作-使其有序-字典序-呢"><span>怎样通过MapReduce完成排序工作，使其有序（字典序）呢？</span></a></h4><ul><li><p>对原始的数据进行分割（Split），得到N个不同的数据分块 。</p><p><img src="'+g+'" alt="image-20220308105129674"></p></li><li><p>对每一个数据分块都启动一个Map进行处理。采用桶排序的方法，每个Map中按照首字母将字符串分配到26个不同的桶中。</p><p><img src="'+u+'" alt="image-20220308105215447"></p></li><li><p>对于Map之后得到的中间结果，启动26个Reduce。按照首字母将Map中不同桶中的字符串集合放置到相应的Reduce中进行处理。</p><p><img src="'+c+'" alt="image-20220308105250863"></p></li></ul><h2 id="_2-3-分布式锁服务chubby" tabindex="-1"><a class="header-anchor" href="#_2-3-分布式锁服务chubby"><span>2.3 分布式锁服务Chubby</span></a></h2><ul><li>Chubby是Google设计的提供<strong>粗粒度</strong>锁服务的一个文件系统，它基于松耦合分布式系统，解决了分布的一致性问题。(粗粒度：指时间短；细粒度：指时间长) <ul><li>通过使用Chubby的<strong>锁服务</strong>，用户可以确保数据操作过程中的一致性</li><li>Chubby作为一个稳定的<strong>存储系统</strong>存储包括元数据在内的小数据</li><li>Google内部还使用Chubby进行<strong>名字服务</strong>（Name Server）</li></ul></li></ul><h3 id="_2-3-1-paxos算法" tabindex="-1"><a class="header-anchor" href="#_2-3-1-paxos算法"><span>2.3.1 Paxos算法</span></a></h3><ul><li><p><strong>三个节点</strong></p><ul><li><p><strong>proposers</strong>：提出决议</p></li><li><p><strong>acceptors</strong>：批准决议</p></li><li><p><strong>learners</strong>：获取并使用已经通过的决议</p></li></ul></li><li><p><strong>三个条件</strong></p><ul><li><p>决议只有在<strong>被</strong>proposers提出后才能批准</p></li><li><p>每次<strong>只批准一个</strong>决议</p></li><li><p>只有决议确定被<strong>批准后</strong>learners<strong>才能获取</strong>这个决议</p></li></ul></li></ul><h4 id="系统的约束条件" tabindex="-1"><a class="header-anchor" href="#系统的约束条件"><span>系统的约束条件</span></a></h4><ul><li><p>p1：每个acceptor只接受它得到的第一个决议。</p></li><li><p>p2：一旦某个决议得到通过，之后通过的决议必须和该决议保持一致。</p><ul><li>p2a：一旦某个决议v得到通过，之后任何acceptor再批准的决议必须是v。</li><li>p2b：一旦某个决议v得到通过，之后任何proposer再提出的决议必须是v。</li><li>p2c：如果一个编号为n的提案具有值v，那么存在一个“多数派”，要么它们中没有谁批准过编号小于n的任何提案，要么它们进行的最近一次批准具有值v。</li></ul></li><li><p>注：为了保证决议的唯一性，acceptors也要满足一个约束条件：<strong>当且仅当 acceptors 没有收到编号大于n的请求时，acceptors 才批准编号为n的提案。</strong></p></li></ul><h4 id="决议的两个阶段" tabindex="-1"><a class="header-anchor" href="#决议的两个阶段"><span>决议的两个阶段</span></a></h4><ul><li><strong>准备阶段</strong><ul><li>proposers<strong>选择一个提案并将它的编号设为n</strong></li><li>将它<strong>发送给acceptors中的一个“多数派”</strong></li><li>acceptors 收到后，如果提案的编号大于它已经回复的所有消息，则<strong>acceptors将自己上次的批准回复给proposers，并不再批准小于n的提案</strong>。</li></ul></li><li><strong>批准阶段</strong><ul><li>当proposers接收到acceptors 中的这个“多数派”的回复后，就向回复请求的acceptors发送accept请求，在符合acceptors一方的约束条件下，acceptors收到accept请求后即批准这个请求。</li></ul></li></ul><h3 id="_2-3-2-chubby系统设计" tabindex="-1"><a class="header-anchor" href="#_2-3-2-chubby系统设计"><span>2.3.2 Chubby系统设计</span></a></h3><h4 id="chubby的设计目标主要有以下几点" tabindex="-1"><a class="header-anchor" href="#chubby的设计目标主要有以下几点"><span>Chubby的设计目标主要有以下几点</span></a></h4><ul><li>高可用性和高可靠性</li><li>高扩展性</li><li>支持粗粒度的<strong>建议性</strong>锁服务</li><li>服务信息的直接存储</li><li>支持缓存机制</li><li>支持通报机制</li></ul><h4 id="chubby的基本架构" tabindex="-1"><a class="header-anchor" href="#chubby的基本架构"><span>Chubby的基本架构</span></a></h4><p><img src="'+d+'" alt="image-20220308110714957"></p><ul><li><p>客户端</p><ul><li>在客户这一端每个客户应用程序都有一个Chubby程序库（Chubby Library），客户端的所有应用都是通过调用这个库中的相关函数来完成的。</li></ul></li><li><p>服务器端</p><ul><li>服务器一端称为Chubby单元，一般是由五个称为副本（Replica）的服务器组成的，这五个副本在配置上完全一致，并且在系统刚开始时处于对等地位。</li></ul></li></ul><h3 id="_2-3-3-chubby中的paxos" tabindex="-1"><a class="header-anchor" href="#_2-3-3-chubby中的paxos"><span>2.3.3 Chubby中的Paxos</span></a></h3><ul><li><p>副本结构</p><p><img src="'+b+'" alt="image-20220309103613765"></p></li><li><p>容错日志API</p><p><img src="'+_+'" alt="image-20220309103637537"></p></li></ul><h3 id="_2-3-4-chubby文件系统" tabindex="-1"><a class="header-anchor" href="#_2-3-4-chubby文件系统"><span>2.3.4 Chubby文件系统</span></a></h3><ul><li><p>系统规定每个节点的 元数据都应当包含以下四种单调递增的64位编号</p><ul><li>实例号（Instance Number）：新节点实例号必定大于旧节点的实例号。</li><li>内容生成号（Content Generation Number）：文件内容修改时该号增加。</li><li>锁生成号（Lock Generation Number）：锁被用户持有时该号增加。</li><li>ACL生成号（ACL Generation Number）：ACL名被覆写时该号增加。</li></ul></li><li><p>常用函数</p><table><thead><tr><th><strong>函</strong> <strong>数 名 称</strong></th><th><strong>作</strong> <strong>用</strong></th></tr></thead><tbody><tr><td>Open()</td><td>打开某个文件或者目录来创建句柄</td></tr><tr><td>Close()</td><td>关闭打开的句柄，后续的任何操作都将中止</td></tr><tr><td>Poison()</td><td>中止当前未完成及后续的操作，但不关闭句柄</td></tr><tr><td>GetContentsAndStat()</td><td>返回文件内容及元数据</td></tr><tr><td>GetStat()</td><td>只返回文件元数据</td></tr><tr><td>ReadDir()</td><td>返回子目录名称及其元数据</td></tr><tr><td>SetContents()</td><td>向文件中写入内容</td></tr><tr><td>SetACL()</td><td>设置ACL名称</td></tr><tr><td>Delete()</td><td>如果该节点没有子节点的话则执行删除操作</td></tr><tr><td>Acquire()</td><td>获取锁</td></tr><tr><td>Release()</td><td>释放锁</td></tr><tr><td>GetSequencer()</td><td>返回一个sequencer</td></tr><tr><td>SetSequencer()</td><td>将sequencer和某个句柄进行关联</td></tr><tr><td>CheckSequencer()</td><td>检查某个sequencer是否有效</td></tr></tbody></table></li></ul><h3 id="_2-3-5-通信协议" tabindex="-1"><a class="header-anchor" href="#_2-3-5-通信协议"><span>2.3.5 通信协议</span></a></h3><ul><li><p>客户端和主服务器之间的通信是通过KeepAlive握手协议来维持的，这一通信过程的 简单示意图 如下</p><p><img src="'+m+'" alt="image-20220309104753368"></p><ul><li><p>客户端租约过期</p><ul><li><p>刚开始时，客户端向主服务器发出一个KeepAlive请求（见图2-10中的1），如果有需要通知的事件时则主服务器会立刻做出回应，否则主服务器并不立刻对这个请求做出回应，而是等到客户端的租约期C1快结束的时候才做出回应（见图2-10中的2），并更新主 服务器租约期为M2。</p></li><li><p>客户端在接到这个回应后认为该主服务器仍处于活跃状态，于是将 租约期更新为C2并立刻发出新的KeepAlive请求（见图2-10中的3）。同样地，主服务器可 能不是立刻回应而是等待C2接近结束，但是在这个过程中主服务器出现故障停止使用。 在等待了一段时间后C2到期，由于并没有收到主服务器的回应，系统向客户端发出一个 危险（Jeopardy）事件，客户端清空并暂时停用自己的缓存，从而进入一个称为宽限期 （Grace Period）的危险状态。这个宽限期默认是45秒。在宽限期内，客户端不会立刻断 开其与服务器端的联系，而是不断地做探询。</p></li><li><p>图2-10中新的主服务器很快被重新选出，当 它接到客户端的第一个KeepAlive请求（见图2-10中的4）时会拒绝（见图2-10中的5），因 为这个请求的纪元号（Epoch Number）错误。不同主服务器的纪元号不相同，客户端的 每次请求都需要这个号来保证处理的请求是针对当前的主服务器。客户端在主服务器拒绝 之后会使用新的纪元号来发送KeepAlive请求（见图2-10中的6）。新的主服务器接受这个 请求并立刻做出回应（见图2-10中的7）。如果客户端接收到这个回应的时间仍处于宽限 期内，系统会恢复到安全状态，租约期更新为C3。如果在宽限期未接到主服务器的相关回应，客户端终止当前的会话。</p></li></ul></li><li><p>主服务器出错</p><ul><li>在客户端和主服务器端进行通信时可能会遇到主服务器故障，图2-10就出现了这种情况。正常情况下旧的主服务器出现故障后系统会很快地选举出新的主服务器，新选举的主 服务器在完全运行前需要经历以下九个步骤。 <ul><li>产生一个新的纪元号以便今后客户端通信时使用，这能保证当前的主服务器不 必处理针对旧的主服务器的请求。</li><li>只处理主服务器位置相关的信息，不处理会话相关的信息。</li><li>构建处理会话和锁所需的内部数据结构。</li><li>允许客户端发送KeepAlive请求，不处理其他会话相关的信息。</li><li>向每个会话发送一个故障事件，促使所有的客户端清空缓存。</li><li>等待直到所有的会话都收到故障事件或会话终止。</li><li>开始允许执行所有的操作。</li><li>如果客户端使用了旧的句柄则需要为其重新构建新的句柄。</li><li>一定时间段后（1分钟），删除没有被打开过的临时文件夹。 如果这一过程在宽限期内顺利完成，则用户不会感觉到任何故障的发生，也就是说新旧主服务器的替换对于用户来说是透明的，用户感觉到的仅仅是一个延迟。使用宽限期的好处正是如此。</li></ul></li></ul></li></ul></li></ul><h3 id="_2-3-6-正确性与性能" tabindex="-1"><a class="header-anchor" href="#_2-3-6-正确性与性能"><span>2.3.6 正确性与性能</span></a></h3><ul><li><p>一致性</p><ul><li>每个Chubby单元是由五个副本组成的，这五个副本中需要选举产生一个主服务器，这种选举本质上就是一个一致性问题</li></ul></li><li><p>安全性</p><ul><li><p>采用的是ACL形式的安全保障措施。只要不被覆写，子节点都是直接继承父节点的ACL名</p><p><img src="'+C+'" alt="image-20220309135138431"></p><ul><li>用户chinacloud提出向文件CLOUD中写入内容的请求。CLOUD首先读取自身的写ACL名fun，接着在fun中查到了chinacloud这一行记录，于是返回信息允许chinacloud对文件进行写操作，此时chinacloud才被允许向CLOUD写入内容。其他的操作和写操作类似。</li></ul></li></ul></li><li><p>优化性能</p><ul><li>提高主服务器默认的租约期、使用协议转换服务将Chubby协议转换成较简单的协议、客户端一致性缓存等</li></ul></li></ul><h2 id="_2-4-分布式结构化数据表bigtable" tabindex="-1"><a class="header-anchor" href="#_2-4-分布式结构化数据表bigtable"><span>2.4 分布式结构化数据表Bigtable</span></a></h2><h3 id="_2-4-1-设计动机与目标" tabindex="-1"><a class="header-anchor" href="#_2-4-1-设计动机与目标"><span>2.4.1 设计动机与目标</span></a></h3><h3 id="_2-4-2-数据模型" tabindex="-1"><a class="header-anchor" href="#_2-4-2-数据模型"><span>2.4.2 数据模型</span></a></h3><ul><li>Bigtable是一个分布式多维映射表，表中的数据通过一个行关键字（Row Key）、一个列关键字（Column Key）以及一个时间戳（Time Stamp）进行索引</li><li>Bigtable的存储逻辑可以表示为：<code>(row:string, column:string, time:int64)→string</code></li></ul><p><img src="'+k+'" alt="image-20220309135506332"></p><ul><li>行 <ul><li>Bigtable的行关键字可以是任意的字符串，但是大小不能够超过64KB。Bigtable和传统的关系型数据库有很大不同，它不支持一般意义上的事务，但能保证对于行的读写操作 具有原子性（Atomic）。表中数据都是根据行关键字进行排序的，排序使用的是词典序。</li><li>上图是Bigtable数据模型的一个典型实例，其中com.cnn.www就是一个行关键字。不直接存储网页地址而将其倒排是Bigtable的一个巧妙设计。这样做至少会带来以下两个好 处。 <ul><li>同一地址域的网页会被存储在表中的连续位置，有利于用户查找和分析。</li><li>倒排便于数据压缩，可以大幅提高压缩率。 由于规模问题，单个的大表不利于数据的处理，因此Bigtable将一个表分成了很多子表（Tablet），每个子表包含多个行。子表是Bigtable中数据划分和负载均衡的基本单位。</li></ul></li></ul></li><li>列 <ul><li>Bigtable并不是简单地存储所有的列关键字，而是将其组织成所谓的列族（ColumnFamily），每个族中的数据都属于同一个类型，并且同族的数据会被压缩在一起保存。</li><li>引入了列族的概念之后，列关键字就采用下述的语法规则来定义： 族名：限定词（family：qualifier） 族名必须有意义，限定词则可以任意选定。</li><li>在图中，内容（Contents）、锚点（Anchor，就是HTML中的链接）都是不同的族。而cnnsi.com和my.look.ca则是锚点族中 不同的限定词。通过这种方式组织的数据结构清晰明了，含义也很清楚。族同时也是 Bigtable中访问控制（Access Control）的基本单元，也就是说访问权限的设置是在族这一 级别上进行的。</li></ul></li><li>时间戳 <ul><li>Google的很多服务比如网页检索和用户的个性化设置等都需要保存不同时间的数据，</li><li>这些不同的数据版本必须通过时间戳来区分。图2-12中内容列的t3、t5和t6表明其中保存 了在t3、t5和t6这三个时间获取的网页。Bigtable中的时间戳是64位整型数，具体的赋值方式可以采取系统默认的方式，也可以用户自行定义。</li></ul></li></ul><h3 id="_2-4-3-系统架构" tabindex="-1"><a class="header-anchor" href="#_2-4-3-系统架构"><span>2.4.3 系统架构</span></a></h3><p><img src="'+y+'" alt="image-20220309141334693"></p><ul><li><p>作用</p><ul><li><p>选取并保证同一时间内只有一个主服务器（Master Server）。</p></li><li><p>获取子表的位置信息。</p></li><li><p>保存Bigtable的模式信息及访问控制列表。</p></li></ul></li></ul><h3 id="_2-4-4-主服务器" tabindex="-1"><a class="header-anchor" href="#_2-4-4-主服务器"><span>2.4.4 主服务器</span></a></h3><ul><li>当一个新的子表产生时，主服务器通过一个加载命令将其分配给一个空间足够的子表服务器。</li><li>创建新表、表合并以及较大子表的分裂都会产生一个或多个新子表。</li><li>分割完成之后子服务器需要向主服务发出一个通知。</li><li>主服务器必须对子表服务器的状态进行监控，以便及时检测到服务器的加入或撤销</li></ul><h4 id="bigtable-中-chubby-的主要作用" tabindex="-1"><a class="header-anchor" href="#bigtable-中-chubby-的主要作用"><span>Bigtable 中 Chubby 的主要作用</span></a></h4><ul><li>基于系统出现故障是一种常态的设计理念（Google几乎所有的产品都是基于这个设计 理念），每个主服务器被设定了一个会话时间的限制。当某个主服务器到时退出后，管理 系统就会指定一个新的主服务器，这个主服务器的启动需要经历以下四个步骤。 <ul><li>从Chubby中获取一个独占锁，确保同一时间只有一个主服务器。</li><li>扫描服务器目录，发现目前活跃的子表服务器。</li><li>与所有的活跃子表服务器取得联系以便了解所有子表的分配情况。</li><li>通过扫描元数据表（Metadata Table），发现未分配的子表并将其分配到合适的</li></ul></li></ul><h3 id="_2-4-5-子表服务器" tabindex="-1"><a class="header-anchor" href="#_2-4-5-子表服务器"><span>2.4.5 子表服务器</span></a></h3><ul><li>SSTable是Google为Bigtable设计的内部数据存储格式。所有的SSTable文件都存储在GFS上，用户可以通过键来查询相应的值。</li></ul><p><img src="'+v+'" alt="image-20220309141736041"></p><p><img src="'+f+'" alt="image-20220309141804780"></p><ul><li><p>不同子表的SSTable可以共享</p></li><li><p>每个子表服务器上仅保存一个日志文件</p></li><li><p>Bigtable规定将日志的内容按照键值进行排序</p></li><li><p>每个子表服务器上保存的子表数量可以从几十到上千不等，通常情况下是100个左右</p></li></ul><h4 id="子表地址组成" tabindex="-1"><a class="header-anchor" href="#子表地址组成"><span>子表地址组成</span></a></h4><ul><li><p>Bigtable系统的内部采用的是一种类似B+树的三层查询体系</p><p><img src="'+x+'" alt="image-20220309141949461"></p></li></ul><h4 id="bigtable-数据存储及读-写操作" tabindex="-1"><a class="header-anchor" href="#bigtable-数据存储及读-写操作"><span>Bigtable 数据存储及读/写操作</span></a></h4><p><img src="'+M+'" alt="image-20220309142425495"></p><h4 id="三种形式压缩之间的关系" tabindex="-1"><a class="header-anchor" href="#三种形式压缩之间的关系"><span><strong>三种形式压缩之间的关系</strong></span></a></h4><p><img src="'+S+'" alt="image-20220309142444490"></p><h3 id="_2-4-6-性能优化" tabindex="-1"><a class="header-anchor" href="#_2-4-6-性能优化"><span>2.4.6 性能优化</span></a></h3><h4 id="局部性群组" tabindex="-1"><a class="header-anchor" href="#局部性群组"><span><strong>局部性群组</strong></span></a></h4><ul><li><p>Bigtable允许用户将原本并不存储在一起的数据以列族为单位，根据需要组织在一个单独的SSTable中，以构成一个局部性群组。</p></li><li><p>用户可以只看自己感兴趣的内容。</p></li><li><p>对于一些较小的且会被经常读取的局部性群组，明显地改善读取效率。</p><p><img src="'+B+'" alt="image-20220309142601236"></p></li></ul><h4 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩"><span>压缩</span></a></h4><h4 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span><strong>布隆过滤器</strong></span></a></h4><p>一个很长的<strong>二进制向量</strong>和一系列<strong>随机映射函数</strong></p><ul><li><p>优点</p><ul><li><p>布隆过滤器的速度快，省空间</p></li><li><p>不会将一个存在的子表判定为不存在</p></li></ul></li><li><p>缺点</p><ul><li>在某些情况下它会将不存在的子表判断为存在</li></ul></li></ul>',88)]))}const L=e(G,[["render",R]]),A=JSON.parse('{"path":"/blogs/xxbj/Cloud_Computing/2_GFS.html","title":"Google文件系统GFS","lang":"en-US","frontmatter":{"title":"Google文件系统GFS","date":"2022-03-07T00:00:00.000Z","tags":["云计算"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"2.1 Google文件系统GFS","slug":"_2-1-google文件系统gfs","link":"#_2-1-google文件系统gfs","children":[{"level":3,"title":"2.1.1 系统框架","slug":"_2-1-1-系统框架","link":"#_2-1-1-系统框架","children":[]},{"level":3,"title":"2.1.2 容错机制","slug":"_2-1-2-容错机制","link":"#_2-1-2-容错机制","children":[]},{"level":3,"title":"2.1.3  系统管理技术","slug":"_2-1-3-系统管理技术","link":"#_2-1-3-系统管理技术","children":[]}]},{"level":2,"title":"2.2 分布式数据处理MapReduce","slug":"_2-2-分布式数据处理mapreduce","link":"#_2-2-分布式数据处理mapreduce","children":[{"level":3,"title":"2.2.1 产生背景","slug":"_2-2-1-产生背景","link":"#_2-2-1-产生背景","children":[]},{"level":3,"title":"2.2.2 编程模型","slug":"_2-2-2-编程模型","link":"#_2-2-2-编程模型","children":[]},{"level":3,"title":"2.2.3 实现机制","slug":"_2-2-3-实现机制","link":"#_2-2-3-实现机制","children":[]},{"level":3,"title":"2.2.4 案例分析","slug":"_2-2-4-案例分析","link":"#_2-2-4-案例分析","children":[]}]},{"level":2,"title":"2.3 分布式锁服务Chubby","slug":"_2-3-分布式锁服务chubby","link":"#_2-3-分布式锁服务chubby","children":[{"level":3,"title":"2.3.1 Paxos算法","slug":"_2-3-1-paxos算法","link":"#_2-3-1-paxos算法","children":[]},{"level":3,"title":"2.3.2 Chubby系统设计","slug":"_2-3-2-chubby系统设计","link":"#_2-3-2-chubby系统设计","children":[]},{"level":3,"title":"2.3.3 Chubby中的Paxos","slug":"_2-3-3-chubby中的paxos","link":"#_2-3-3-chubby中的paxos","children":[]},{"level":3,"title":"2.3.4 Chubby文件系统","slug":"_2-3-4-chubby文件系统","link":"#_2-3-4-chubby文件系统","children":[]},{"level":3,"title":"2.3.5 通信协议","slug":"_2-3-5-通信协议","link":"#_2-3-5-通信协议","children":[]},{"level":3,"title":"2.3.6 正确性与性能","slug":"_2-3-6-正确性与性能","link":"#_2-3-6-正确性与性能","children":[]}]},{"level":2,"title":"2.4 分布式结构化数据表Bigtable","slug":"_2-4-分布式结构化数据表bigtable","link":"#_2-4-分布式结构化数据表bigtable","children":[{"level":3,"title":"2.4.1 设计动机与目标","slug":"_2-4-1-设计动机与目标","link":"#_2-4-1-设计动机与目标","children":[]},{"level":3,"title":"2.4.2 数据模型","slug":"_2-4-2-数据模型","link":"#_2-4-2-数据模型","children":[]},{"level":3,"title":"2.4.3 系统架构","slug":"_2-4-3-系统架构","link":"#_2-4-3-系统架构","children":[]},{"level":3,"title":"2.4.4 主服务器","slug":"_2-4-4-主服务器","link":"#_2-4-4-主服务器","children":[]},{"level":3,"title":"2.4.5 子表服务器","slug":"_2-4-5-子表服务器","link":"#_2-4-5-子表服务器","children":[]},{"level":3,"title":"2.4.6 性能优化","slug":"_2-4-6-性能优化","link":"#_2-4-6-性能优化","children":[]}]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/Cloud_Computing/2_GFS.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(A));export{L as comp,A as data};
