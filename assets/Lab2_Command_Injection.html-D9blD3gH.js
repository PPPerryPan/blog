import{_ as s,c as a,a as p,o as e}from"./app-Dh5bFHR3.js";const t="/blog/assets/image-20220427094004100-CMf5CDY9.png",l="/blog/assets/image-20220427093947695-Duxvsfbr.png",i="/blog/assets/image-20220427094106559-Csoixs9p.png",c="/blog/assets/image-20220427094404025-CkZ-MnUS.png",o="/blog/assets/image-20220427094747936-CGHVEyE6.png",u="/blog/assets/image-20220427095356516-8P81PdXJ.png",r="/blog/assets/image-20220427092749348-C11xQvj-.png",k="/blog/assets/image-20220427092844009-B5RSi_UU.png",d={};function m(g,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="low" tabindex="-1"><a class="header-anchor" href="#low"><span>Low</span></a></h2><h3 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Submit&#39;</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;ip&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Determine OS and execute the ping command.</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;s&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Windows NT&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Windows</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// *Unix</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  -c 4 &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for the end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cmd</span><span class="token punctuation">}</span></span>&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h3><p>直接尝试ping</p><p><img src="`+t+'" alt="image-20220427094004100"></p><p>尝试添加连接符 127.0.0.1 &amp; ipconfig</p><p><img src="'+l+'" alt="image-20220427093947695"></p><p>查看PC用户</p><p><img src="'+i+'" alt="image-20220427094106559"></p><p>尝试添加用户，通过火绒提示可知，命令在无防火墙/安全软件的情况下，可正常执行 <s>（我就懒得允许了，建了还得自己再去删）</s></p><p><img src="'+c+`" alt="image-20220427094404025"></p><h2 id="medium" tabindex="-1"><a class="header-anchor" href="#medium"><span>Medium</span></a></h2><h3 id="源代码-1" tabindex="-1"><a class="header-anchor" href="#源代码-1"><span>源代码</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Submit&#39;</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;ip&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Set blacklist</span></span>
<span class="line">    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;&amp;&amp;&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;;&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Remove any of the charactars in the array (blacklist).</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Determine OS and execute the ping command.</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;s&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Windows NT&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Windows</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// *nix</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  -c 4 &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for the end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cmd</span><span class="token punctuation">}</span></span>&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析"><span>代码分析</span></a></h3><p>可以看到，medium级别的代码在low级别的代码上增加量了对 &amp;&amp; 和 ；的过滤，但并未过滤&amp;，|，|| 。</p><h3 id="漏洞利用-1" tabindex="-1"><a class="header-anchor" href="#漏洞利用-1"><span>漏洞利用</span></a></h3><p>故上述Net user命令在此等级依然可正常实现。</p><p><img src="`+o+`" alt="image-20220427094747936"></p><h2 id="high" tabindex="-1"><a class="header-anchor" href="#high"><span>High</span></a></h2><h3 id="源代码-2" tabindex="-1"><a class="header-anchor" href="#源代码-2"><span>源代码</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Submit&#39;</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;ip&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Set blacklist</span></span>
<span class="line">    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;&amp;&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;;&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;| &#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;-&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;$&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;(&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;)&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;\`&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;||&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Remove any of the charactars in the array (blacklist).</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Determine OS and execute the ping command.</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;s&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Windows NT&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Windows</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// *nix</span></span>
<span class="line">        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  -c 4 &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Feedback for the end user</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cmd</span><span class="token punctuation">}</span></span>&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分析-1" tabindex="-1"><a class="header-anchor" href="#代码分析-1"><span>代码分析</span></a></h3><p>查看过滤代码发现 ”|”后面有个空格，因此当输入”127.0.0.1 |net view”，一样可以攻击，”|”是管道符，意思是将前者处理后的结果作为参数传给后者。</p><h3 id="漏洞利用-2" tabindex="-1"><a class="header-anchor" href="#漏洞利用-2"><span>漏洞利用</span></a></h3><p>稍作修改，上述Net user命令在此等级依然可正常实现。</p><p><img src="`+u+`" alt="image-20220427095356516"></p><h2 id="impossible" tabindex="-1"><a class="header-anchor" href="#impossible"><span>Impossible</span></a></h2><h3 id="源代码-3" tabindex="-1"><a class="header-anchor" href="#源代码-3"><span>源代码</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Submit&#39;</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Check Anti-CSRF token</span></span>
<span class="line">    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;user_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;session_token&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index.php&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Get input</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;ip&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Split the IP into 4 octects</span></span>
<span class="line">    <span class="token variable">$octet</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Check IF each octet is an integer</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">sizeof</span><span class="token punctuation">(</span> <span class="token variable">$octet</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// If all 4 octets are int&#39;s put the IP back together.</span></span>
<span class="line">        <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.&#39;</span> <span class="token operator">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.&#39;</span> <span class="token operator">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.&#39;</span> <span class="token operator">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Determine OS and execute the ping command.</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;s&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Windows NT&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Windows</span></span>
<span class="line">            <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// *nix</span></span>
<span class="line">            <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#39;ping  -c 4 &#39;</span> <span class="token operator">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Feedback for the end user</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cmd</span><span class="token punctuation">}</span></span>&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Ops. Let the user name theres a mistake</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Generate Anti-CSRF token</span></span>
<span class="line"><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分析-2" tabindex="-1"><a class="header-anchor" href="#代码分析-2"><span>代码分析</span></a></h3><p>stripslashes(string) : 该函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p>explode(separator,string,limit): 该函数把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p><p>is_numeric(string): 该检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p><p>可以看到，Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><p><strong>中文乱码</strong></p><p><img src="`+r+'" alt="image-20220427092749348"></p><p>解决方案：更改dvwaPage.inc.php， main HTML code下的字符编码，将 UTF-8 改为 GB2312</p><p><img src="'+k+'" alt="image-20220427092844009"></p>',41)]))}const h=s(d,[["render",m]]),v=JSON.parse('{"path":"/blogs/xxbj/Web_Security/Lab2_Command_Injection.html","title":"DVWA - Command Injection","lang":"en-US","frontmatter":{"title":"DVWA - Command Injection","date":"2022-04-27T00:00:00.000Z","tags":["网络安全"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"Low","slug":"low","link":"#low","children":[{"level":3,"title":"源代码","slug":"源代码","link":"#源代码","children":[]},{"level":3,"title":"漏洞利用","slug":"漏洞利用","link":"#漏洞利用","children":[]}]},{"level":2,"title":"Medium","slug":"medium","link":"#medium","children":[{"level":3,"title":"源代码","slug":"源代码-1","link":"#源代码-1","children":[]},{"level":3,"title":"代码分析","slug":"代码分析","link":"#代码分析","children":[]},{"level":3,"title":"漏洞利用","slug":"漏洞利用-1","link":"#漏洞利用-1","children":[]}]},{"level":2,"title":"High","slug":"high","link":"#high","children":[{"level":3,"title":"源代码","slug":"源代码-2","link":"#源代码-2","children":[]},{"level":3,"title":"代码分析","slug":"代码分析-1","link":"#代码分析-1","children":[]},{"level":3,"title":"漏洞利用","slug":"漏洞利用-2","link":"#漏洞利用-2","children":[]}]},{"level":2,"title":"Impossible","slug":"impossible","link":"#impossible","children":[{"level":3,"title":"源代码","slug":"源代码-3","link":"#源代码-3","children":[]},{"level":3,"title":"代码分析","slug":"代码分析-2","link":"#代码分析-2","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/Web_Security/Lab2_Command_Injection.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(v));export{h as comp,v as data};
