import{_ as l,c as a,a as t,o as e}from"./app-Dh5bFHR3.js";const n="/blog/assets/android-stack_2x-VohX5Qi8.png",o="/blog/assets/image-20220308145107481-CVVM4M4i.png",r="/blog/assets/image-20220308155854640-BQ7JIvG3.png",d="/blog/assets/image-20220308161136925-DRYGWUdt.png",s="/blog/assets/image-20220308161539191-BdSX8gCn.png",p="/blog/assets/image-20220308161952254-BFt0TsWl.png",g="/blog/assets/image-20220308162300278-DUobeS4y.png",c="/blog/assets/image-20220308163147957-CqEYh24O.png",m="/blog/assets/image-20220308163843118-HA0VVuzB.png",u={};function h(A,i){return e(),a("div",null,i[0]||(i[0]=[t('<h2 id="android系统架构" tabindex="-1"><a class="header-anchor" href="#android系统架构"><span>Android系统架构</span></a></h2><p><img src="'+n+'" alt="img"></p><h2 id="android系统特点" tabindex="-1"><a class="header-anchor" href="#android系统特点"><span>Android系统特点</span></a></h2><ul><li><p>四大组件</p><ul><li>活动（Activity）：门面，应用中能看到的东西都放这</li><li>服务（Service）：无法看到，后台默默运行</li><li>广播接收器（Broadcast Receiver）：允许应用接收来自各处的广播消息（如电话、短信），向发出广播消息</li><li>内容提供器（Content Provider）：应用程序之间共享数据（如读取系统电话簿中联系人），需通过其实现</li></ul></li><li><p>丰富的系统控件</p><ul><li>系统自带丰富控件，也可自定义控件</li></ul></li><li><p>SQLite数据库</p><ul><li>自带这种轻量级、运算速度极快的嵌入式关系型数据库，支持标准</li><li>SQL语法，还可通过封装好的API进行操作</li></ul></li><li><p>强大的多媒体</p><ul><li>音乐、视频、录音、拍照、闹铃等，都可通过代码控制</li></ul></li><li><p>传感器</p><ul><li>如加速度、方向、重力传感器等</li><li>地理位置定位 <ul><li>手机都内置有GPS,结合功能强大的地图功能，潜力无限</li></ul></li></ul></li></ul><h2 id="android开发环境" tabindex="-1"><a class="header-anchor" href="#android开发环境"><span>Android开发环境</span></a></h2><ul><li>装JDK</li><li>装Android Studio <ul><li>自定义安装记得选上Android SDK</li></ul></li></ul><h2 id="创建第一个android项目" tabindex="-1"><a class="header-anchor" href="#创建第一个android项目"><span>创建第一个Android项目</span></a></h2><ul><li><p>创建空项目</p></li><li><p>项目配置</p></li><li><p>切换到Android标签，等待初始化</p><p><img src="'+o+'" alt="image-20220308145107481"></p></li></ul><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><p><img src="'+r+'" alt="image-20220308155854640"></p><p><img src="'+d+'" alt="image-20220308161136925"></p><h3 id="模拟器配置" tabindex="-1"><a class="header-anchor" href="#模拟器配置"><span>模拟器配置</span></a></h3><ul><li>锤子按钮：编译</li><li>播放按钮：运行</li><li>Device Manager：模拟器管理</li></ul><h3 id="helloworld详解" tabindex="-1"><a class="header-anchor" href="#helloworld详解"><span>HelloWorld详解</span></a></h3><ul><li><p>app --&gt; manifests --&gt; AndroidManifest.xml</p><p><img src="'+s+'" alt="image-20220308161539191"></p><ul><li>Activity(当前前台活跃) 内高亮处 <code>MainActivity</code> 可 Ctrl + 鼠标 定位 <ul><li>android.intent.action.MAIN决定应用程序最先启动的Activity ，</li><li>android.intent.category.LAUNCHER决定应用程序是否显示在程序列表里。</li><li>Main和LAUNCHER同时设定才有意义，</li></ul></li></ul></li><li><p>app --&gt; java --&gt; com.example.helloworld --&gt; MainActivity</p><p><img src="'+p+'" alt="image-20220308161952254"></p><ul><li><code>activity_main</code> 可 Ctrl + 鼠标定位</li></ul></li><li><p>app --&gt; res --&gt; activity_main.xml</p><p><img src="'+g+'" alt="image-20220308162300278"></p></li><li><p>可见，HelloWorld已成功跑起来，中间文字也在源代码中定位。</p></li></ul><h3 id="日志工具log" tabindex="-1"><a class="header-anchor" href="#日志工具log"><span>日志工具Log</span></a></h3><ul><li><p>Android中的日志工具类是Log（android.util.Log），这个类中提供了如下5个方法来供我们打印日志。</p><ul><li><strong>Log.v()</strong>。用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是 Android日志里面级别最低的一种。</li><li><strong>Log.d()</strong>。用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。 对应级别debug，比verbose高一级。</li><li><strong>Log.i()</strong>。用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分 析用户行为的数据。对应级别info，比debug高一级。</li><li><strong>Log.w()</strong>。用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修 复一下这些出现警告的地方。对应级别warn，比info高一级。</li><li><strong>Log.e()</strong>。用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打 印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比warn高一级。</li></ul></li><li><p>测试：</p><p><img src="'+c+'" alt="image-20220308163147957"></p><p><img src="'+m+'" alt="image-20220308163843118"></p></li><li><p>过滤器使用：</p><ul><li>略</li></ul></li><li><p>为什么使用Log而不使用println() ？</p><ul><li>我相信很多的Java新手会非常喜欢使用System.out.println()方法来打印日志，在Kotlin 中与之对应的是println()方法，不知道你是不是也喜欢这么做。不过在真正的项目开发中， 是极度不建议使用System.out.println()或println()方法的，如果你在公司的项目中经 常使用这两个方法来打印日志的话，就很有可能要挨骂了。</li><li>为什么System.out.println()和println()方法会这么不受待见呢？经过我仔细分析之 后，发现这两个方法除了使用方便一点之外，其他就一无是处了。方便在哪儿呢？在Android Studio中你只需要输入“sout”，然后按下代码提示键，方法就会自动出来了，相信这也是很多 Java新手对它钟情的原因。那缺点又在哪儿了呢？这个就太多了，比如日志开关不可控制、不 能添加日志标签、日志没有级别区分……</li><li>听我说了这些，你可能已经不太想用System.out.println()和println()方法了，那么Log就把上面所说的缺点全部改好了吗？虽然谈不上全部，但我觉得Log已经做得相当不错了。</li></ul></li></ul>',17)]))}const v=l(u,[["render",h]]),_=JSON.parse('{"path":"/blogs/xxbj/Android/1.html","title":"Android - 开发入门","lang":"en-US","frontmatter":{"title":"Android - 开发入门","date":"2022-03-08T00:00:00.000Z","tags":["Android"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"Android系统架构","slug":"android系统架构","link":"#android系统架构","children":[]},{"level":2,"title":"Android系统特点","slug":"android系统特点","link":"#android系统特点","children":[]},{"level":2,"title":"Android开发环境","slug":"android开发环境","link":"#android开发环境","children":[]},{"level":2,"title":"创建第一个Android项目","slug":"创建第一个android项目","link":"#创建第一个android项目","children":[{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":3,"title":"模拟器配置","slug":"模拟器配置","link":"#模拟器配置","children":[]},{"level":3,"title":"HelloWorld详解","slug":"helloworld详解","link":"#helloworld详解","children":[]},{"level":3,"title":"日志工具Log","slug":"日志工具log","link":"#日志工具log","children":[]}]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/Android/1.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(_));export{v as comp,_ as data};
