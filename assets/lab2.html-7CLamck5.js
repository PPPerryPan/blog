import{_ as l,c as e,a,o as t}from"./app-Dh5bFHR3.js";const i="/blog/assets/B1-B9bg0cDr.jpg",p="/blog/assets/B2-C9Qx5_PM.png",n="/blog/assets/B3-BlsumHoL.png",r="/blog/assets/B4-BbtVKljv.png",o="/blog/assets/B5-CVV4ru_i.jpg",d="/blog/assets/B6-CXOfmSOC.png",g="/blog/assets/B7-0wDtkESW.jpg",c="/blog/assets/B8-BGLhH55M.png",h="/blog/assets/B9-Q7glvLno.jpg",b="/blog/assets/B10-v584Icwe.png",m="/blog/assets/B11-CCmgPIYX.png",u="/blog/assets/B12-SDTDikXJ.png",_="/blog/assets/B13-L0pwJaPq.png",x="/blog/assets/B14-DeAjyUoR.png",v="/blog/assets/B15-DCVBgT9m.png",B="/blog/assets/B16-F6dJumyw.png",f="/blog/assets/B17-CbawzQw9.png",P="/blog/assets/B18-Bp5F-J_M.png",k={};function j(D,s){return t(),e("div",null,s[0]||(s[0]=[a('<h2 id="实验目的与要求" tabindex="-1"><a class="header-anchor" href="#实验目的与要求"><span>实验目的与要求</span></a></h2><ol><li>更好地熟悉和掌握计算机中汇编语言和高级语言之间的关系。</li><li>增强学生对于调试器gdb、edb等调试器的使用和逆向工程等方面原理与技能的掌握。</li><li>掌握使用gdb调试器和objdump来反汇编炸弹的可执行文件，并单步跟踪调试每一阶段的机器代码，从中理解每一汇编语言代码的行为或作用，进而设法“推断”出拆除炸弹所需的目标字符串。</li><li>完善测试，需要拆除尽可能多的炸弹</li></ol><h2 id="实验仪器设备-实验环境" tabindex="-1"><a class="header-anchor" href="#实验仪器设备-实验环境"><span>实验仪器设备 / 实验环境</span></a></h2><ol><li>Linux操作系统 — 64位Ubuntu</li><li>gdb调试器和objdump反汇编指令</li><li>笔记本</li></ol><h2 id="实验内容及步骤" tabindex="-1"><a class="header-anchor" href="#实验内容及步骤"><span>实验内容及步骤</span></a></h2><ul><li><p>一个“binary bombs”（二进制炸弹，下文将简称为炸弹）是一个Linux可执行C程序，包含了7个阶段（phase1~phase6和一个隐藏阶段）。炸弹运行的每个阶段要求学生输入一个特定的字符串，若的输入符合程序预期的输入，该阶段的炸弹就被“拆除”，否则炸弹“爆炸”并打印输出 &quot;BOOM!!!&quot;字样。实验的目标是拆除尽可能多的炸弹层次。</p></li><li><p>每个炸弹阶段考察了机器级语言程序的一个不同方面，难度逐级递增：</p><p>阶段1：字符串比较</p><p>阶段2：for循环</p><p>阶段3：switch分支</p><p>阶段4：递归函数</p><p>阶段5：数组元素按序访问</p><p>阶段6：链表</p><p>隐藏阶段：只有在阶段4的拆解字符串后再附加一特定字符串后才会出现（作为最后一个阶段）</p></li><li><p>为了完成二进制炸弹拆除任务，需要使用gdb调试器和objdump来反汇编炸弹的可执行文件，并单步跟踪调试每一阶段的机器代码，从中理解每一汇编语言代码的行为或作用，进而设法“推断”出拆除炸弹所需的目标字符串。这可能需要在每一阶段的开始代码前和引爆炸弹的函数前设置断点，以便于调试。</p></li><li><p>拆弹密码的输入分文两种模式。</p><ul><li><p>模式1：正常手动输入，每次程序运行到某一阶段会停下来要求用户输入数据。这种方式比较原始，不推荐使用。如果使用这种做法，在程序调试到后期时，每次为了进入后期的断点位置都需要在之前的每一个阶段进行手动输入，极其浪费时间。</p></li><li><p>模式2：采用输入重定向。首先将答案文本写至一个.txt文本中，每个阶段的拆弹密码占一行。</p><p><img src="'+i+'" alt="B1"></p></li><li><p>在调试程序时直接使用输入重定向指令，例如（假设密码已被写入到之前的拆弹密码文本文件solution.txt中）：./bomb &lt; solution.txt</p></li><li><p>通过执行以上指令即可直接根据屏幕输出来判断程序正确地进行了几个阶段或者在第几个阶段出现了错误。如果密码全部正确，提示结果如下图所示：</p></li></ul></li></ul><p><img src="'+p+`" alt="B2"></p><h2 id="实验设备与软件环境" tabindex="-1"><a class="header-anchor" href="#实验设备与软件环境"><span>实验设备与软件环境</span></a></h2><ol><li>Linux操作系统 —— 64位 Ubuntu 18.04</li><li>C编译环境(gcc)、make自动化编译工具</li><li>虚拟机</li></ol><h2 id="实验注意事项" tabindex="-1"><a class="header-anchor" href="#实验注意事项"><span>实验注意事项</span></a></h2><ol><li>建议在linux下进行文本拆弹密码文本编辑。</li><li>建议使用gdb或IDA、edb、DDD之类的调试软件辅助进行。</li><li>建议实验过程中手绘图表辅助逆向工程分析。</li></ol><h2 id="实验技巧" tabindex="-1"><a class="header-anchor" href="#实验技巧"><span>实验技巧</span></a></h2><ul><li><p>你需要掌握：</p><p>1.使用 gdb 和反汇编以查看程序的运行过程。</p><p>2.明白具体的操作符的含义。</p><p>3.理解不同寄存器的常用方法。</p><p>4.一些汇编语句与实际命令的转换。</p><p>5.使用gdb和反汇编以查看程序的运行过程</p><p>本实验的执行文件为bomb（无后缀），先在命令行找到bomb文件的位置，再用gdb调试工具运行该文件，写法为<strong>gdb bomb</strong>。进入 gdb 调试后，使用<strong>disas phase_X</strong>反汇编相应关卡,或者直接使用<strong>layout regs</strong>进入图形化交互界面,注意自己添加断点(<strong>break</strong> <strong>函数名</strong>)，以及单步执行(<strong>si</strong>)</p></li><li><p>具体的操作符的含义</p><p>常量以符号$开头：$-42， $0x15213（一定要注意十进制还是十六进制）</p><p>寄存器以符号%开头：%esi，%rax（可能存的是值或者地址）</p><p>内存地址用括号括起来：如(%rbx)，括号实际上是去寻址的意思</p><p>一些汇编语句与实际命令的转换，下面是一个<strong>例子</strong></p><p>注：汇编指令的英文一般就指代其功能，如mov（move移动）。汇编的注释为;。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sub    $0x8,%rsp    					;rsp寄存器的内容减去8再保存到rsp中</span>
<span class="line">mov    $0x402400,%esi   	 			;将常量$0x402400存到esi寄存器中，一般出现这类地址，是重点信息</span>
<span class="line">callq  0x401338 &lt;strings_not_equal&gt;    	;调用strings_not_equal函数。bomb文件中的函数名基本就指代其功能</span>
<span class="line">test   %eax,%eax    					;test指令做&amp;操作，一般和跳转一起使用</span>
<span class="line">je     0x400ef7 &lt;phase_1+23&gt; ;</span>
<span class="line">callq  0x40143a &lt;explode_bomb&gt;    		;je为若相等则跳转，je也等价于jz（若为零则跳转）。此处即若eax零则跳转到0x400ef7。</span>
<span class="line">add    $0x8,%rsp    					;rsp寄存器内容加8再保存到rsp中</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="编程要求" tabindex="-1"><a class="header-anchor" href="#编程要求"><span>编程要求</span></a></h2><p>根据提示，在汇编代码中找到本关密码，在执行文件中将密码输出验证。为了方便找出过关代码，反汇编找出源码：<strong>objdump -d ./bomb &gt; bomb.s</strong></p><p>如果提示没有执行权限，可以使用ll命令查看该文件夹下的文件权限，并用chmod修改</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">./bomb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>chmod 777 bomb来修改运行权限</p><p>之后再尝试运行即可，效果如下图。如果没有遇到Permission denied问题，则不需要这一步的特殊处理。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">chmod 777 bomb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>gdb bomb进入调试</p><p>进入调试后，先设置断点，如break phase_1即输入第一关密码后，在phase_1处暂停。再用run命令开始运行程序，run以后会出现一段话，此时输入第一关密码，随便输一个，即进入断点处，此时disas即可查看第一关汇编代码，注意不必纠结函数，给出的地址很重要。</p><p>例：</p><p>**1.**<strong>查看地址0x01存的内容</strong></p><p>​ print 0x01</p><p>​ x/s 0x01 ;x为以16进制显示，s为以字符串显示</p><p>**2.**<strong>查看寄存器esi存的内容</strong></p><p>​ <strong>print $esi</strong></p><p>** x/s $esi**</p><p>**3.**<strong>建议将反汇编出来的代码放入一个文本中，好做笔记。</strong></p><p><strong>4.将汇编中出现的代码，与书中所学的if，while，for，switch的模板做笔记，提炼出程序框架。</strong></p><h2 id="实验过程与结果" tabindex="-1"><a class="header-anchor" href="#实验过程与结果"><span>实验过程与结果</span></a></h2><h3 id="phase-1" tabindex="-1"><a class="header-anchor" href="#phase-1"><span>Phase_1</span></a></h3><ol><li>使用gdb boom 进入gdb调试模式，并使用layout regs进入GUI模式</li></ol><p><img src="`+n+'" alt="img"></p><ol start="2"><li>在Phase_1函数前打断点，并将程序跑起来</li></ol><p><img src="'+r+'" alt="img"></p><ol start="3"><li>由下面的call… &lt;strings_not_equal&gt;猜出lea内藏有拆弹密码，尝试x/s注释内的内存地址，得出拆弹密码：Brownie, you are doing a heck of a job.</li></ol><p><img src="'+o+'" alt="img"></p><h3 id="phase-2" tabindex="-1"><a class="header-anchor" href="#phase-2"><span>Phase_2</span></a></h3><ol><li>反汇编Phase_2后，观察到call另一地址</li></ol><p><img src="'+d+'" alt="img"></p><ol start="2"><li>同时，观察到对比的第一个数字为0，如果不为0，则call explode_bomb。</li></ol><p><img src="'+g+'" alt="img"></p><ol start="3"><li>进入read_six_number后，观察到lea指令，查看0x5555554029a3的内容，对应0x555555401841处call指令，得到解除炸弹的密码为六个整数。</li></ol><p><img src="'+c+'" alt="img"></p><ol start="4"><li>在&lt;phase_2+30&gt;位置打断点，并使用c指令让gdb运行至位于&lt;phase_2+30&gt;处断点，通过观察phase_2函数可知，第一个数字为0，第二个数字为1，其余四位为前两位相加。</li></ol><p><img src="'+h+'" alt="img"></p><ol start="5"><li>组合后得到拆弹密码：0 1 1 2 3 5</li></ol><p><img src="'+b+'" alt="image-20220205192543252"></p><h3 id="phase-3" tabindex="-1"><a class="header-anchor" href="#phase-3"><span>Phase_3</span></a></h3><ol><li>易知，解除炸弹的密码为两个整数</li></ol><p><img src="'+m+'" alt="img"></p><ol start="2"><li>观察后猜出，解除炸弹的其中一个密码可能为：6 50。</li></ol><p><img src="'+u+'" alt="img"></p><ol start="3"><li>尝试输入后，成功call phase_defused，Phase_3拆除成功。</li></ol><p><img src="'+_+'" alt="img"></p><h3 id="phase-4" tabindex="-1"><a class="header-anchor" href="#phase-4"><span>Phase_4</span></a></h3><ol><li>易知，拆弹密码为两个整数</li></ol><p><img src="'+x+'" alt="4.1"></p><ol start="2"><li>观察汇编代码后，可得出：第一个数必定小于等于14，第二个整数必定为1</li></ol><p><img src="'+v+'" alt="4.1"></p><p><img src="'+B+'" alt="4.1"></p><ol start="3"><li>观察func4</li></ol><p><img src="'+f+'" alt="4.1"></p><ol start="4"><li>尝试输入：11 1，成功call phase_defused，炸弹拆除成功。</li></ol><p><img src="'+P+'" alt="4.1"></p><h2 id="操作异常问题与解决方案" tabindex="-1"><a class="header-anchor" href="#操作异常问题与解决方案"><span>操作异常问题与解决方案</span></a></h2><p>问题：实验过程中，其中一台电脑使用Ubuntu 18.04，执行apt-get update 和 apt-get upgrade 打完更新后，重启虚拟机，会卡死在登录页面，无法进入Ubuntu Desktop，多次使用VMware自定义安装及快速安装功能将系统重装后，只要执行两条更新命令，问题依旧出现。</p><p>思考：可能存在兼容性问题。</p><p>解决：改用Ubuntu 20.04 LTS。</p><h2 id="实验总结" tabindex="-1"><a class="header-anchor" href="#实验总结"><span>实验总结</span></a></h2><p>GNU symbolic debugger，简称「GDB 调试器」，是 Linux 平台下最常用的一款程序调试器，发展至今，GDB 调试器已经对 C、C++、Go、Objective-C、OpenCL、Ada 等多种编程语言提供了支持。</p><p>在本次实验中，对于反汇编指令以及一系列的寄存器操作后的结果有了一定的认识，知道了程序背后的机器级代码是如何执行。在这个过程中需要细心的分析，确定程序的流程。</p><p>实验前需要先去学习工具的使用与一些编译的基础（符号表、定址表等等）花费了一些时间。前几个阶段过于关注函数的具体实现而没有根据常识去推测一些明显函数的作用花费了一些时间。</p><p>实验过程需要细致的分析与大胆的猜测与实验验证，还需要小心操作，最重要的是耐心，面对非常晦涩的汇编代码如何一步步地弄清代码的作用很需要毅力。当然也可以通过自己写出等价的C代码来帮助自己理解。</p>',76)]))}const U=l(k,[["render",j]]),C=JSON.parse('{"path":"/blogs/xxbj/CSAPP/lab2.html","title":"CSAPP：Bomb Lab 实验记录","lang":"en-US","frontmatter":{"title":"CSAPP：Bomb Lab 实验记录","date":"2021-12-02T00:00:00.000Z","tags":["CSAPP"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"实验目的与要求","slug":"实验目的与要求","link":"#实验目的与要求","children":[]},{"level":2,"title":"实验仪器设备 / 实验环境","slug":"实验仪器设备-实验环境","link":"#实验仪器设备-实验环境","children":[]},{"level":2,"title":"实验内容及步骤","slug":"实验内容及步骤","link":"#实验内容及步骤","children":[]},{"level":2,"title":"实验设备与软件环境","slug":"实验设备与软件环境","link":"#实验设备与软件环境","children":[]},{"level":2,"title":"实验注意事项","slug":"实验注意事项","link":"#实验注意事项","children":[]},{"level":2,"title":"实验技巧","slug":"实验技巧","link":"#实验技巧","children":[]},{"level":2,"title":"编程要求","slug":"编程要求","link":"#编程要求","children":[]},{"level":2,"title":"实验过程与结果","slug":"实验过程与结果","link":"#实验过程与结果","children":[{"level":3,"title":"Phase_1","slug":"phase-1","link":"#phase-1","children":[]},{"level":3,"title":"Phase_2","slug":"phase-2","link":"#phase-2","children":[]},{"level":3,"title":"Phase_3","slug":"phase-3","link":"#phase-3","children":[]},{"level":3,"title":"Phase_4","slug":"phase-4","link":"#phase-4","children":[]}]},{"level":2,"title":"操作异常问题与解决方案","slug":"操作异常问题与解决方案","link":"#操作异常问题与解决方案","children":[]},{"level":2,"title":"实验总结","slug":"实验总结","link":"#实验总结","children":[]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/CSAPP/lab2.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(C));export{U as comp,C as data};
