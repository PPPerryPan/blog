import{_ as s,c as a,a as p,o as e}from"./app-Dh5bFHR3.js";const l="/blog/assets/image-20220422153857405-BlyH_WRu.png",i="/blog/assets/image-20220422153914818-CZKgNcbZ.png",t="/blog/assets/image-20220422154520477-Cv2F4fd9.png",c="/blog/assets/image-20220422162632938-DfKbUrJZ.png",o="/blog/assets/image-20220422171447497-BakHZv8K.png",u="/blog/assets/image-20220422172126236-CBrzL_dz.png",d="/blog/assets/image-20220422172235509-C8vMHGZj.png",r="/blog/assets/image-20220422172333729-B7PdmoN3.png",k="/blog/assets/image-20220422172339342-D3As759Q.png",v={};function m(g,n){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="同步" tabindex="-1"><a class="header-anchor" href="#同步"><span>同步</span></a></h1><h2 id="_6-1-并发" tabindex="-1"><a class="header-anchor" href="#_6-1-并发"><span>6.1 并发</span></a></h2><p>进程的并发性：一组进程的执行在时间上是重叠的，即一个进程执行的第一条指令是在另一个进程执行的最后一条指令完成之前开始</p><p><img src="'+l+'" alt="image-20220422153857405"></p><p><img src="'+i+`" alt="image-20220422153914818"></p><p>并发程序设计的好处</p><ul><li><p>能够同时启动多台设备操作</p></li><li><p>充分利用处理器与外围设备，外围设备与外围设备之间的并行工作能力</p></li><li><p>减少设备间的等待</p></li><li><p>提高资源利用率和计算机的工作效率</p></li></ul><h3 id="_6-1-1-并发进程间关系" tabindex="-1"><a class="header-anchor" href="#_6-1-1-并发进程间关系"><span>6.1.1 并发进程间关系</span></a></h3><ul><li>互斥（竞争） <ul><li>当多个进程因为争夺临界资源而互斥执行称为进程的互斥。</li><li>由于并发进程共用某一资源引起的，一个进程的执行可能影响与其竞争资源的其它进程</li><li>进程互斥关系是一种特殊的进程同步关系，即逐次使用互斥共享资源，是对进程使用资源次序上的一种协调。</li></ul></li></ul><h2 id="_6-2-临界区管理" tabindex="-1"><a class="header-anchor" href="#_6-2-临界区管理"><span>6.2 临界区管理</span></a></h2><p>并发进程中与共享变量有关的程序段叫做临界区</p><p>共享变量代表的资源叫做临界资源</p><p>并发进程中访问共享变量部分的程序段必须顺序执行，才能保证数据的一致性</p><p>临界区问题：进入临界区前，每个进程都要请求许可，实现这个请求的代码称为进入区（PV操作）</p><p>退出区：退出对临界资源操作</p><p>剩余区：其他代码为剩余区</p><p>临界区问题解决方案需要满足三个要求</p><ul><li>互斥：如果进程Pi在其临界区内执行，那么其他进程都不能在其临界区执行</li><li>进步：如果没有进程在其临界区执行，并且有进程需要进入临界区，那么只有那些不在剩余区内执行的进程可以参加选择，以便确定谁能下次进入临界区</li><li>有限等待：从一个进程做出进入临界区的请求直到这个请求允许为止，其他进程允许进入临界区的次数具有上限</li></ul><p>临界区调度原则</p><ul><li>一次最多只允许一个进程进入临界区内执行</li><li>如果已有进程在临界区，其他进程试图进入的进程应等待</li><li>进入临界区内的进程应在有限时间内退出，以便让等待进程中一个进入</li></ul><p><strong>临界资源</strong>：也称独占资源，是指在一段时间内只允许一个进程访问的资源。例如打印机，磁带机，也可以是进程共享的数据、变量等。</p><p><strong>有界缓冲区</strong> · 生产者消费者进程间通信</p><p>声明：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line">…<span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span>item<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">item buffer<span class="token punctuation">[</span>BUFFER<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">int</span> in<span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token keyword">int</span> out <span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓冲区空：in=out</p><p>缓冲区满：(in + 1) % BUFFER_SIZE == out</p><p><img src="`+t+'" alt="image-20220422154520477"></p><p><strong>互斥锁</strong></p><p>采用互斥锁保护临界区，从而防止竞争条件，具体是进程进入临界区时应得到锁，退出临界区时释放锁</p><h2 id="_6-3-中断" tabindex="-1"><a class="header-anchor" href="#_6-3-中断"><span>6.3 中断</span></a></h2><p>中断是改变处理器执行指令顺序的一种事件。</p><p>计算机在执行程序的过程中，当遇到中断时，计算机停止现行程序的运行，转向对这些中断事件的处理，处理结束后再返回到现行程序的间断处。</p><p>作用：使CPU可以与其他设备并行工作，能有效提高CPU的利用率，改善系统性能，支持系统的异步性。</p><p><strong>中断的类型</strong></p><ul><li>中断分为同步中断（内部中断）和异步中断（外部中断）两种。 <ul><li>同步中断（内部中断）。当指令执行时由CPU控制单元产生，称为同步是因为只有在一条指令终止执行后CPU才会发出中断。</li><li>异步中断（外部中断）。由其他硬件设备随机产生。 <ul><li>外部中断又分为外部可屏蔽中断和不可屏蔽中断。 <ul><li>外部可屏蔽中断。由I/O设备产生的中断，有两种方式可以屏蔽中断。 <ul><li>一是将标志位寄存器的IF位置0，表示关中断。</li><li>二是可以对可编程中断控制器编程来禁止中断请求。</li></ul></li><li>不可屏蔽中断 <ul><li>由紧急事件引起，如硬件故障。</li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>关中断</strong></p><p>进程在进入临界区之前先关中断，退出临界区时开中断</p><p>在关中断期间，进程调度程序失去中断激活的机会，不会切换进程，保证了临界区的互斥执行</p><p>关中断适用场合：简单有效，对操作系统自身有用，可在更新共享变量或列表的几条指令期间禁止中断。</p><p>缺点：</p><ul><li>不适合作为通用的互斥机制，关中断时间过长会影响性能和系统效率；限制CPU交叉执行程序的能力</li><li>不适应于多处理器计算机系统，因为一个处理器关中断，并不能防止进程在其它处理器上执行相同的临界段代码；</li><li>关中断权力赋予用户会存在危险，若用户未开中断，则系统可能因此而终止。</li></ul><h2 id="_6-4-同步" tabindex="-1"><a class="header-anchor" href="#_6-4-同步"><span>6.4 同步</span></a></h2><ul><li><p>同步（协作）</p><ul><li><p>并发进程为完成同一任务而共享某些数据，形成协作关系。</p></li><li><p>进程间协同工作的手段（直接制约）</p></li><li><p>多个相关进程在执行次序上的协调</p></li></ul></li></ul><h3 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量"><span>信号量</span></a></h3><p>用信号量的取值来表示资源的使用状况，或某种事件是否发生，以此为基础实现进程的同步。</p><p>对不同的共享资源设置被称为信号量的变量，用信号量的取值来表示资源的使用状况，或某种事件是否发生。</p><p>通过信号量的取值来判断进程是否能访问与信号量对应的共享资源。</p><p>如果整型量 ＞ 0,说明有可用资源；如果整型量 ≤ 0，说明资源忙，进程必须等待。</p><p>对于一次只允许一个进程访问的临界资源，可定义一个用于互斥的整型信号量，并将其初始化为1。</p><p>信号量和PV操作的功能：解决并发进程的互斥和同步问题</p><p><strong>两种信号量</strong></p><ul><li>计数信号量（一般信号量）：值不受限制，用于控制访问具有多个实例的某种资源，信号量的初值表示为可用的资源数量。通常用于提供同步功能。</li><li>二进制信号量：值只能为0和1，用于提供互斥访问功能。</li></ul><p>只能通过两个标准的原子操作：P操作和V操作</p><p>​ *：原子操作：内核中执行时不可被中断的过程</p><p><img src="'+c+`" alt="image-20220422162632938"></p><p>P( )和V( )操作定义：</p><ul><li>P(s)；将信号量s减去1，若结果小于0，则调用P(s)的进程被置成等待信号量s的状态。</li><li>V(s)：将信号量s加1，若结果不大于0，则释放一个等待信号量s的进程。</li></ul><p>另一种说法：</p><ul><li>P操作意味着请求一个资源，V操作意味着释放一个资源。</li><li>在一定条件下，P操作代表挂起进程操作，而V操作代表唤醒被挂起进程的操作</li></ul><p><strong>计数信号量</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> value<span class="token punctuation">;</span>           <span class="token comment">//信号量值</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">pcb</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>    <span class="token comment">//信号量队列指针</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span>semaphore <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        S<span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>            </span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>         </span>
<span class="line">                <span class="token function">W</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">V</span><span class="token punctuation">(</span>semaphore <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        S<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>            </span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        </span>
<span class="line">                <span class="token function">R</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二进制信号量</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> value<span class="token punctuation">;</span>           <span class="token comment">//信号量值，只能为0和1</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">pcb</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>    <span class="token comment">//信号量队列指针</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">BP</span><span class="token punctuation">(</span>binary_semaphore <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	       s<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">else</span></span>
<span class="line">	     <span class="token function">W</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">BV</span><span class="token punctuation">(</span>binary_semaphore <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>list is <span class="token function">empty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	      s<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">else</span></span>
<span class="line">	      <span class="token function">R</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用信号量实现互斥</strong></p><p>为临界资源设一互斥信号量mutex，初值为1</p><p>将临界区置于P（mutex）和V（mutex）之间</p><p>P(mutex) 和 V(mutex)一定要成对出现在同一个进程中</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">semaphore mutex<span class="token punctuation">;</span></span>
<span class="line">mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">cobegin</span>
<span class="line">process <span class="token function">Pi</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//i=1,…,n</span></span>
<span class="line">	<span class="token function">P</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">{</span>临界区<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">V</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步"><span>进程同步</span></a></h3><p>并发进程之间相互合作，完成一项工作，它们之间有一定的时序关系。</p><p>1）P操作(wait)和V操作(signal)操作必须成对出现。</p><p>2）P操作wait操作的顺序不能颠倒。必须先对资源信号量（即empty和full）进程P操作wait操作，然后再对互斥信号量进程V操作wait操作。</p><p>例1：用信号量机制描述下列并发进程的同步关系</p><p><img src="`+o+`" alt="image-20220422171447497"></p><ul><li><p>解法一：信号量表示进程能否开始。</p><ul><li>设信号量m1、m2、m3、m4分别表示进程P1、P2、P3、P4能否开始执行，其初值m1为1，其余均为0。</li><li>注：此处 m1 变量 可省略</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> m1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m2<span class="token operator">=</span>m3<span class="token operator">=</span>m4<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span></span>
<span class="line">cobegin</span>
<span class="line">    <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// P2() // P3() // P4()</span></span>
<span class="line">coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p3<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p4</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p4<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解法二：信号量表示进程是否结束</p><ul><li>设信号量m1、m2、m3、m4分别表示进程P1、P2、P3、P4是否结束，其初值均为0。</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> m1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m2<span class="token operator">=</span>m3<span class="token operator">=</span>m4<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span></span>
<span class="line">cobegin</span>
<span class="line">     <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// P2() // P3() // P4()</span></span>
<span class="line">coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    执行p1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p3<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">P</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    执行p4<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">V</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><img src="`+u+`" alt="image-20220422172126236"></p><ul><li><p>设信号量m1~m7分别表示进程P1~P7能否开始执行，</p></li><li><p>其初值m1为1，其余均为0。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">int m1=1,m2=m3=m4=m5=m6=m7=0 ;</span>
<span class="line">cobegin</span>
<span class="line">     p1() // p2() // p3() // p4() // p5() // p6() // p7()</span>
<span class="line">coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><img src="`+d+'" alt="image-20220422172235509"></p><p>例3-4：吃水果：父亲放桔子，母亲放苹果，儿子取苹果，女儿取桔子</p><p><img src="'+r+'" alt="image-20220422172333729"></p><p><img src="'+k+`" alt="image-20220422172339342"></p><p>分析：父母亲先放水果，儿子女儿再取水果；父亲与女儿，母亲与儿子是一个同步关系，父亲与母亲要竞争空盘子。</p><p>解法一：设信号量m1表示是否有空盘子，信号量m2表示儿子能否取苹果，m3表示女儿能否取桔子。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> m1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m3<span class="token operator">=</span><span class="token number">0</span>；</span>
<span class="line">cobegin</span>
<span class="line">      <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// p2() // p3() // p4()</span></span>
<span class="line">coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        洗桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        放桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        洗苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        放苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        取苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        吃苹果<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p4</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        取桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        吃桔子<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法二：设信号量m1表示父亲放完桔子，m2表示母亲放完苹果，信号量m3表示儿子或女儿取完水果。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> m1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m3<span class="token operator">=</span><span class="token number">1</span>；</span>
<span class="line">cobegin</span>
<span class="line">      <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// p2() // p3() // p4()</span></span>
<span class="line">coend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        洗桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        放桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        洗苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        放苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        取苹果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        吃苹果<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">p4</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">P</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        取桔子<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">V</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        吃桔子<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ul><li>进程同步有一定的时序关系。</li><li>信号量表示进程的关键工作是否可以开始或已经结束。</li><li>信号量的个数与进程的个数一致，有时可以省略部分信号量。</li><li>对同一个信号量的PV操作不在一个进程中。</li><li>表示开始：P自己，V别人</li><li>表示结束：P别人，V自己</li></ul><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><p>互斥：PV 操作在同一个进程中</p><p>同步：PV操作不在一个进程中</p>`,97)]))}const f=s(v,[["render",m]]),b=JSON.parse('{"path":"/blogs/xxbj/OS/6.html","title":"同步","lang":"en-US","frontmatter":{"title":"同步","date":"2022-04-29T00:00:00.000Z","tags":["操作系统"],"categories":["学习笔记"]},"headers":[{"level":2,"title":"6.1 并发","slug":"_6-1-并发","link":"#_6-1-并发","children":[{"level":3,"title":"6.1.1 并发进程间关系","slug":"_6-1-1-并发进程间关系","link":"#_6-1-1-并发进程间关系","children":[]}]},{"level":2,"title":"6.2 临界区管理","slug":"_6-2-临界区管理","link":"#_6-2-临界区管理","children":[]},{"level":2,"title":"6.3 中断","slug":"_6-3-中断","link":"#_6-3-中断","children":[]},{"level":2,"title":"6.4 同步","slug":"_6-4-同步","link":"#_6-4-同步","children":[{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":3,"title":"进程同步","slug":"进程同步","link":"#进程同步","children":[]}]},{"level":2,"title":"补充","slug":"补充","link":"#补充","children":[]}],"git":{"createdTime":1748156404000,"updatedTime":1748156404000,"contributors":[{"name":"PPPerryPan","email":"perrypan0123@outlook.com","commits":1}]},"filePathRelative":"blogs/xxbj/OS/6.md"}');import.meta.webpackHot&&(import.meta.webpackHot.accept(),__VUE_HMR_RUNTIME__.updatePageData&&__VUE_HMR_RUNTIME__.updatePageData(b));export{f as comp,b as data};
